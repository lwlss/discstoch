{
    "collab_server" : "",
    "contents" : "# Single lineages data for population simulations\n# Using frequentist deterministic modelling\n# In accordance with FreqDetMod.R\n\n#====================== Parsing the Data ======================================\n\n# Subsetting the data according to strain (genotype)\n#'Subsetting the formatted data according to strain.\n#'\n#'@param d - Data\n#'@param a - Area\n#'@param t - Times\n#'@param strain - Strain Name\n#'@return A list of all strain information: its \\code{area, times, data, name} and \\code{indices} which can\n#'accessed using the \\code{$} operator.\n#'@export\nsubset_strain<-function(d,a,t,strain){\n  s_name=toString(strain)\n  indices=which(d$genotype == strain)\n  s_area=a[indices,]; s_times=t[indices,]; s_data=d[indices,]\n  return(list(\"area\"=s_area,\"times\"=s_times,\"data\"=s_data,\n              \"name\"=s_name, \"indices\"=indices))\n}\n\n# Simulating multiple population growth curves\n#'@export\npop_sim_dat<-function(strain,k,Nsample,t,it){\n  #where s is a single strain name, N is the sample size,\n  #and it is the number of iterations, t is the time\n  PopData=matrix(0,nrow=it,ncol=length(t))\n  total_indices=c()\n  total_simdata=list()\n  total_rates=c()\n  for (i in 1:it){\n    #cannot take sample larger than the population when replace=F\n    if (dim(strain$area)[1] < Nsample) {Nsample=dim(strain$area)[1]}\n    indices=sample(1:dim(strain$area)[1],Nsample,replace=FALSE)\n    rates=k[indices]\n    expdata=strain$area[indices,]\n    simdata=matrix(0,nrow=length(rates),ncol=length(t))\n    for (j in 1:length(rates)){\n      simdata[j,]=simExponential(rates[j],t)\n    }\n    total_simdata[[i]]=simdata\n    PopData[i,]=colSums(simdata)\n    total_indices=c(total_indices,indices)\n    total_rates=c(total_rates,rates)\n  }\n  return(list(\"PopData\"=PopData,\"SimData\"=total_simdata,\"indices\"=total_indices,\"SimRates\"=total_rates))\n}\n\n# Simulating multiple population growth curves from the tail distribution\n#'@export\npop_sim_dat_tail<-function(strain,k,Nsample,t,it){\n  PopData_Tail=matrix(0,nrow=it,ncol=length(t))\n  cutoff=mean(k)+(sd(k))\n  indices=which(k>=cutoff)\n  #cannot take sample larger than the population when replace=F\n  if (length(indices) < Nsample) {Nsample=length(indices)}\n  for (i in 1:it){\n    pickindices=sample(indices,Nsample,replace=FALSE)\n    rates=strain$data$rate[pickindices]\n    simdata=matrix(0,nrow=length(rates),ncol=length(t))\n    for (j in 1:length(rates)){\n      simdata[j,]=simExponential(rates[j],t)\n    }\n    PopData_Tail[i,]=colSums(simdata)\n  }\n  return(list(\"PopData_Tail\"=PopData_Tail,\"indices_tail\"=total_indices))\n}\n\n# Returns the rates of a piece-wise linear fit\n#'@export\npiecewise_pop_rate<-function(a,t){\n  k1=c()\n  k2=c()\n  pb=c()\n  intval=c()\n  for (i in 1:dim(a)[1]){\n    rate1=piecewise_LM(log(a[i,]),t)$slope1\n    rate2=piecewise_LM(log(a[i,]),t)$slope2\n    pbreak=piecewise_LM(log(a[i,]),t)$pb\n    intercept=piecewise_LM(log(a[i,]),t)$intercept\n    k1=c(k1,rate1)\n    k2=c(k2,rate2)\n    pb=c(pb,pbreak)\n    intval=c(intval,intercept)\n  }\n  return(list(\"k1\"=k1,\"k2\"=k2,\"pb\"=pb, \"intval\"=intval))\n}\n\n# Calculates the contribution of a fasted sampled strain to the pop'n growth\n#'@export\nfast_rate_contribution<-function(k_p,k_i){\n  r_i_max=max(strain$data$rate[popdata_indices])\n  contribution=k_p/r_i_max\n  return(contribution)\n}\n\n#====================== Plotting the Data =====================================\n\n#Getting breaks for a histogram\n#'@export\nhist_cells<-function(dat,int){\n  lo=trunc(min(dat)*10)/10-0.1 #rounding down\n  hi=trunc(max(dat)*10)/10+0.1 #rounding up\n  cells=seq(lo,hi,int)\n  return(cells)\n}\n\n# Histogram of Growth Rate\n#'@export\nhisto<-function(k,s,SE=TRUE){\n  #cells=hist_cells(k,0.01)\n  cells=seq(0,0.6,0.01)\n  hist(k,breaks=cells,xlab=\"r\",\n       main=paste(s,\"; N=\",length(k),sep=\"\"),\n       cex.lab=1.4, cex.main=1.2,col=\"lightblue\")\n  if (SE==TRUE){\n    abline(v=mean(k), col=\"red\")\n    #Standard Error\n    abline(v=(mean(k)+(sd(k)/sqrt(length(k)))),col=\"red\",lty=2)\n    abline(v=(mean(k)-(sd(k)/sqrt(length(k)))),col=\"red\",lty=2)\n    abline(v=range(k)[1],col=\"lightblue\")\n    abline(v=range(k)[2],col=\"lightblue\")\n  }\n}\n\n# Plotting growth curves for sampled strain on log scale\n#'Plotting growth curves on the log scale.'\n#'\n#'@param a - Area\n#'@param t - Time\n#'@param s - Identifier\n#'@param Nsample - No. of growth curves sampled\n#'@param title - Adds \\code{\"Identifier; Nsample\"} as title\n#'@param hist - Adds a histogram of the estimated growth rates for all areas supplied using \\code{LM_growthrate}\n#'@return A time versus area plot of sampled growth curves and (if \\code{hist=TRUE}) a histogram of all growth rates.\n#'@export\nplot_growth<-function(a,t,s,Nsample=100,title=TRUE,hist=FALSE){\n  #where area (a), times (t) and name (s) are required as input variables\n  #cannot take sample larger than the population when replace=F\n  if (dim(a)[1] < Nsample) {Nsample=dim(a)[1]}\n  indices=sample(1:dim(a)[1],Nsample,replace=FALSE)\n  if (hist==FALSE){\n    plot(1,type='n', xlim=range(t[indices,],na.rm=TRUE),\n         ylim=range(a[indices,],na.rm=TRUE), log='y',ylab=\"\",xlab=\"\")\n    if (title==TRUE){\n      title(main=paste(s,\"; N=\",Nsample,sep=\"\"),xlab=\"Time (h)\",\n            ylab=\"Microcolony Area (px)\",cex.lab=1.2)\n    }\n    for (i in indices){\n      lines(as.numeric(t[i,]),as.numeric(a[i,]),col=rgb(0.3,0.3,0.3,0.3),lwd=2)\n    }\n    return(indices)\n  }else{\n    op=par(mfrow=c(2,1))\n    k=c()\n    plot(1,type='n', xlim=range(t[indices,],na.rm=TRUE),\n         ylim=range(a[indices,],na.rm=TRUE),xlab=\"\",\n         ylab=\"\", log='y')\n    if (title==TRUE){\n      title(main=paste(s,\"; N=\",Nsample,sep=\"\"),xlab=\"Time (h)\",\n            ylab=\"Microcolony Area (px)\",cex.lab=1.2)\n    }\n    for (i in indices){\n      lines(as.numeric(t[i,]),as.numeric(a[i,]),col=rgb(0.3,0.3,0.3,0.3),lwd=2)\n      rate=LM_growthrate(as.numeric(a[i,]),as.numeric(t[i,]))$rates\n      k=c(k,rate)\n    }\n    k[which(k<0)]=0\n    histo(k,s,SE=TRUE)\n    par(op)\n    return(indices)\n  }\n}\n\n# Plotting multiple population growth according to the exponential model\n#'Plotting simulated population growth curves on the log scale.'\n#'\n#'@param a - Area\n#'@param t - Time\n#'@param s - Identifier\n#'@param title - Adds \\code{\"Identifier; Nsample\"} as title\n#'@param hist - Adds a histogram of the estimated growth rates for all areas supplied using \\code{LM_growthrate}\n#'@return A time versus area plot of simulated growth curves and (if \\code{hist=TRUE}) a histogram of all growth rates.\n#'@export\npop_plot_growth<-function(a,t,s,title=TRUE,hist=FALSE){\n  if (hist==FALSE){\n    plot(1,type='n', xlim=range(t), ylim=range(a),xlab=\"\",\n         ylab=\"\",log='y')\n    if (title==TRUE){\n      title(main=paste(s, \"; N=\",a[1,1],\"; Iterations=\", dim(a)[1], sep=\"\"),xlab=\"Time (h)\",\n            ylab=\"log(Area) (px)\",cex.lab=1.2)\n    }\n    for (i in 1:dim(a)[1]){\n      lines(t,a[i,],col=rgb(0.3,0.3,0.3,0.3),lwd=2)\n    }\n  }else{\n    op=par(mfrow=c(2,1))\n    plot(1,type='n', xlim=range(t), ylim=range(a),xlab=\"Time\",\n         ylab=\"log(Area)\",log='y')\n    if (title==TRUE){\n      title(main=paste(s, \"; N=\",a[1,1],\"; Iterations=\", dim(a)[1], sep=\"\"),xlab=\"Time (h)\",\n            ylab=\"log(Area) (px)\",cex.lab=1.2)\n    }\n    k=c()\n    for (i in 1:dim(a)[1]){\n      lines(t,a[i,],col=rgb(0.3,0.3,0.3,0.3),lwd=2)\n      rate=LM_growthrate(a[i,],t)$rates\n      k=c(k,rate)\n    }\n    histo(k,s,SE=TRUE)\n    par(op)\n    return(k)\n  }\n}\n\n# Plotting the histogram of the strain growth rate wih the simulated population\n# growth rate\n#'@export\nstrain_pop_hist<-function(s,k_s,k_pop1,k_pop2=0){\n  histo(k_s,s,SE=FALSE)\n  abline(v=mean(k_pop1), col=\"red\")\n  abline(v=(mean(k_pop1)+(sd(k_pop1)/sqrt(length(k_pop1)))),col=\"red\",lty=2)\n  abline(v=(mean(k_pop1)-(sd(k_pop1)/sqrt(length(k_pop1)))),col=\"red\",lty=2)\n  if(k_pop2!=0){\n    abline(v=mean(k_pop2), col=\"green\")\n    abline(v=(mean(k_pop2)+(sd(k_pop2)/sqrt(length(k_pop2)))),col=\"green\",lty=2)\n    abline(v=(mean(k_pop2)-(sd(k_pop2)/sqrt(length(k_pop2)))),col=\"green\",lty=2)\n  }\n}\n",
    "created" : 1466334038523.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "159519356",
    "id" : "DB213068",
    "lastKnownWriteTime" : 1466345632,
    "last_content_update" : 1466345632762,
    "path" : "~/detstocgrowth/R/PopSims.R",
    "project_path" : "R/PopSims.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}