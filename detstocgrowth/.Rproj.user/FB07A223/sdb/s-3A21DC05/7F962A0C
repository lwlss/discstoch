{
    "collab_server" : "",
    "contents" : "# Analysis Script Using the Package\n# Frequentist, Deterministic, Exponential Modelling\n\nlibrary(data.table)\nlibrary(detstocgrowth)\nlibrary(fishplot)\nlibrary(MASS)\n\ndataset<-function(x){\n  if (x == \"Lawless\"){\n    # DataSet1: Lawless\n    area=fread(\"Lawless_area_shortTC.txt\",header=FALSE)\n    times=fread(\"Lawless_time_shortTC.txt\",header=FALSE)\n    data=fread(\"Lawless_data_shortTC.txt\",header=FALSE) #3rd column (Identifier) => strain_parentcolony\n    names(data)=c(\"genotype\",\"clonalcolony\",\"identifier\",\"blobnumber\")\n    return(list(\"area\"=area,\"data\"=data,\"times\"=times,\"residuals\"=residuals))\n  }\n  else if (x == \"Levy\"){\n    # DataSet2: Levy\n    area=fread(\"Levy_area_filtered.txt\",header=FALSE)\n    times=fread(\"Levy_times_filtered.txt\",header=FALSE)\n    data=fread(\"Levy_data_filtered.txt\",header=TRUE) #3rd column (Identifier) => replicate\n    return(list(\"area\"=area,\"data\"=data,\"times\"=times,\"residuals\"=residuals))\n  }\n  else if (x == \"Ziv\"){\n    # DataSet3: Ziv\n    area=fread(\"Ziv_area_filtered1.txt\",header=FALSE)\n    times=fread(\"Ziv_times_filtered1.txt\",header=FALSE)\n    data=fread(\"Ziv_data_filtered1.txt\",header=TRUE) #3rd column (Identifier) => colony\n    return(list(\"area\"=area,\"data\"=data,\"times\"=times,\"residuals\"=residuals))\n  }\n  else {print(\"Not a valid dataset\")}\n}\n\n# Choosing a data set\ndatsetname=\"Lawless\"\nx=dataset(datsetname)\narea=x$area\ntimes=x$times\ndata=x$data\n\n# Choosing a strain and extracting the data for it\nstrain_names=unique(data$genotype)\nprint(strain_names)\npickstrain=strain_names[1] #choose strain here!\nstrain=detstocgrowth::subset_strain(data,area,times,pickstrain)\ndetstocgrowth::plot_growth(strain$area,strain$times,strain$name,Nsample=dim(strain$area)[1],title=TRUE,hist=TRUE)\n\n#Calculating the estimated growth rates for all growth curves of the strain\nstrain_rates=c()\nstrain_int=c()\ndist=c()\nfor (i in 1:dim(strain$area)[1]){\n  k=detstocgrowth::LM_growthrate(strain$area[i,],strain$times[i,])$rate\n  intercept=detstocgrowth::LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$int\n  fit=detstocgrowth::LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$fit\n  res=residuals(fit)\n  dist=c(dist,range(res)[1]-range(res)[2])\n  strain_rates=c(strain_rates,k)\n  strain_int=c(strain_int,intercept)\n}\n\n#Setting growth rates <0 equal to 0\nstrain_rates[which(strain_rates<0)]=0\n\n# FishPlot using data simulated from the growth rates over a longer time course and a\n# starting population of a single cell\nsample_rates=sample(strain_rates,8)\nsample_rates=c(max(strain_rates),sample_rates,0)\n# Simulating growth curves using the above rates\nt=seq(1,48,1)\nsim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))\nfor (i in 1:length(sample_rates)){\n  sim_area[i,]=round(detstocgrowth::simExponential(sample_rates[i],t))\n}\npop_data=colSums(sim_area)\nfrac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))\nfor (i in 1:dim(sim_area)[1]){\n  frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)\n}\nfrac.table=frac.table*100\nfrac.table=trunc(frac.table) #need to round this down otherwise creatFishObjct() gives error\nparents=rep(0,dim(sim_area)[1])\nfish = fishplot::createFishObject(frac.table,parents,timepoints=t,col=rainbow(length(sample_rates)))\nfish = fishplot::layoutClones(fish)\nfishplot::fishPlot(fish,shape=\"spline\",title.btm=paste(strain$name),\n         cex.title=0.5, vlines=c(0,max(t)),\n         vlab=c(\"1h\",\"48h\"))\ntitle(paste(\"FishPlot for\",datsetname,strain$name))\n\n# Using 100 growth curves for extrapolation\ntotal=dim(strain$area)[1]\nN=100\ntime=seq(0,35,0.5)\n\n# Refitting the exponential model to the newly simulated data to obtain\n# population growth rate\niterations=20\npopsim=pop_sim_dat(strain,strain_rates,N,time,iterations)\npopdata=popsim$PopData\n\npop_rates=c()\nfor (i in 1:dim(popdata)[1]){\n  k=detstocgrowth::LM_growthrate(as.numeric(popdata[i,]),time)$rate\n  pop_rates=c(pop_rates,k)\n}\n\nop=par(mfrow=c(2,1))\ndetstocgrowth::pop_plot_growth(popdata,time,strain$name,title=TRUE,hist=FALSE)\ndetstocgrowth::histo(strain_rates,strain$name,SE=TRUE)\n#abline(v=mean(strain_rates),col=\"red\",lwd=3)\nabline(v=mean(pop_rates),col=\"blue\",lwd=3)\nlegend(\"topright\",legend=c(\"True Mean\",\"Pop'n Mean\"),col=c(\"red\",\"blue\"),lty=c(1,1))\npar(op)\n\n#Note indices for all iterations!\npopdata_indices=popsim$indices\n\n# Fitting a piece-wise regression to the Population Simulations\npiece_op=detstocgrowth::piecewise_pop_rate(popdata,time)\n\n# Analysing how much each growth rate contributes to the pop'n growth during\n# the exponential phase\n# contribution=fast_rate_contribution(piece_op$k2,strain_rates[popdata_indices])\n# filename=paste(\"Contribution_\",datsetname,strain$name,\"_0.1N_c\",\n#                signif(contribution, digits=3),\".png\",sep=\"\")\n\n# # png(filename)\n# op=par(mfrow=c(3,1))\n# detstocgrowth::plot_growth(strain$area[popdata_indices,],strain$times[popdata_indices,],\n#             strain$name,Nsample=100)\n# detstocgrowth::pop_plot_growth(popdata,time,strain$name,hist=FALSE)\n# detstocgrowth::strain_pop_hist(strain$name,strain_rates[popdata_indices],piece_op$k1,piece_op$k2)\n# par(op)\n# # dev.off()\n\n# Changes in variance & value of growth rate estimates with an inceasing\n# size of the starting population\nN=dim(strain$area)[1]\niterations=50\ntotal_popsim=detstocgrowth::pop_sim_dat(strain,strain_rates,N,time,iterations)\nsimdata=total_popsim$SimData\npoprates=total_popsim$SimRates\n\n#Sum up one hundred more rows each time\n#N=100\ninit_pop=seq(1,N,1)\nall_simpoprate=list()\nall_meansimrates=c()\nfor (i in 1:length(init_pop)){\n  init_simmeanrates=c()\n  init_simpoprate=c()\n  for (j in 1:iterations){\n    if(i==1){\n      simitdata=simdata[[j]][1,]\n    }else{simitdata=colSums(simdata[[j]][1:init_pop[i],])}\n    simpoprate=detstocgrowth::LM_growthrate(simitdata,time)$rates #Pop'n Rates\n    init_simpoprate=c(init_simpoprate,simpoprate)\n    simrates=poprates[j:N*j] #Orignial Single Lineage Rates\n    simmmeanrates=mean(simrates) #Mean Original Rates\n    init_simmeanrates=c(init_simmeanrates,simmmeanrates)\n  }\n  all_simpoprate[[i]]=init_simpoprate\n  all_meansimrates=c(all_meansimrates,init_simmeanrates)\n}\n#Use all_simpoprate to calculate the mean and variance for each element in the list\n#See whether variance is decreasing with increasing pop'n size\n#See whether different between pop'n mean rate and single lineage mean rate differs\nvariance=c()\nmean=c()\nfor (i in 1:length(init_pop)){\n  variance=c(variance,var(all_simpoprate[[i]]))\n  mean=c(mean,mean(all_simpoprate[[i]]))\n}\ntrue_mean=mean(poprates)\ntrue_variance=var(poprates)\n\n#To get rid of -INF values in variance when taking the log\nvariance[which(variance==0)]=NA\n\n#http://www.r-bloggers.com/r-single-plot-with-two-different-y-axes/\n#png(paste(paste(\"PopSimDat\",datsetname,strain$name,signif(true_mean,3),signif(true_variance,3),\"IT1\",sep=\"_\"),\".png\",sep=\"\"))\npar(mar=c(5,5,2,5))\nplot(NULL,xlim=range(init_pop),ylim=range(poprates),ylab=\"Growth Rate\",xlab=\"Initial Population Size\")\nfor (i in 1:length(all_simpoprate)){\n  points(rep(init_pop[i],iterations),all_simpoprate[[i]],col=\"grey\")\n}\nlines(init_pop,mean,col=\"darkgreen\")\nabline(h=true_mean,col=\"red\")\npar(new=T)\nd=data.frame(x=init_pop,v=log(variance),m=mean)\nwith(d,plot(x,v,type='p',col=\"cornflowerblue\",axes=F,xlab=NA,ylab=NA,cex=1.2))\nloess_fit<-loess(v~x,data=d)\ninit_pop=init_pop[which(variance>0)]\nlines(init_pop,predict(loess_fit),col=\"darkblue\",lwd=1,lty=1)\naxis(side=4)\nmtext(side=4,line=3,\"log(Variance)\")\nlegend(\"bottom\",legend=c(\"Mean\",\"True Mean\",\"Variance\",\"Pop'n Simulations\"),lty=c(1,1,0,0),pch=c(NA,NA,16,16),col=c(\"forestgreen\",\"red\",\"cornflowerblue\",\"grey\"))\ntitle(main=paste(\"Simulated Population Growth Rate for\", datsetname, strain$name))\n#dev.off()\n\n####### Aside (One-off Calculations)\n\n# #Calculating the estimate growth rates for all growth curves\n# all_rates=c()\n# all_int=c()\n# all_dist=c()\n# for (i in 1:dim(area)[1]){\n#   k=LM_growthrate(area[i,],times[i,])$rate\n#   intercept=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$int\n#   fit=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$fit\n#   res=studres(fit)\n#   all_dist=c(all_dist,range(res)[1]-range(res)[2])\n#   all_rates=c(all_rates,k)\n#   all_int=c(all_int,intercept)\n# }\n\n# #Saving the range of the residuals according to blob number\n# res_data=cbind(dist,strain$data$clonalcolony,strain$data$blobnumber)\n#\n# #Get rid of NA distances; this means not enough time points\n# all_rates=all_rates[-which(is.na(all_dist))]\n# all_data=data[-which(is.na(all_dist)),]\n# all_dist=all_dist[-which(is.na(all_dist))]\n# all_rates[which(all_rates<0)]=0\n# #Make distance positive\n# all_dist=abs(all_dist)\n# #Save useful info\n# all_res_data=cbind(all_dist,all_rates,data$clonalcolony,data$blobnumber)\n# write.table(all_res_data,\"Lawless_ResRateRange_Filtered_Norm_20.txt\",col.names=FALSE,row.names=FALSE)\n#all_rates[which(all_rates<0)]=0\n\n# # Calibration Curve\n# cells=breaks=seq(0,350,10)\n# col_range=seq(min(strain_rates),max(strain_rates),(max(strain_rates)-min(strain_rates))/5)\n# colours=rainbow(5)\n# strain$area=as.matrix(strain$area)\n# hist(strain$area[,1],main=paste(\"Starting Cell Size for\",strain$name),xlab=\"Area at t=0\",breaks=cells)\n# hist(strain$area[which(strain_rates==0),1],col=\"grey\",add=T,breaks=cells)\n# hist(strain$area[,1],main=paste(\"Starting Cell Size for\",strain$name),xlab=\"Area at t=0\",breaks=cells)\n# hist(strain$area[which(strain_rates==0),1],col=\"grey\",add=T,breaks=cells)\n# for (i in 1:5){\n#   hist(strain$area[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1]),1],col=adjustcolor(colours[i],0.4),breaks=cells,add=T)\n# }\n# legend(\"topright\",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c(\"grey\",colours))\n#\n# mean(strain$area[which(strain_rates<=col_range[1]),1])\n# median(strain$area[which(strain_rates<=col_range[1]),1])\n#\n# area=as.matrix(area)\n# mean(area[which(all_rates==0),1])\n# median(area[which(all_rates==0),1]) #Say this is equal to one cell\n#\n# area_cell=median(area[which(all_rates==0),1])\n# calibrated_area=t(apply(area,1, function(x) x/area_cell))\n#\n# #Getting the blob number of the three fastest rates\n# strain_rates_sorted=sort(strain_rates,decreasing=TRUE)\n# max_rates=strain_rates_sorted[1:3]\n# max_indices=which(strain_rates==max_rates[1]| strain_rates==max_rates[2]|strain_rates==max_rates[3])\n# print(strain$data[max_indices,])\n\n# #Overlay the 2 histograms to show that non-dividing cell start size distribution matches that of the entire pop'n\n# hist(exp(strain_int),main=paste(\"Simulated Starting Size for\",strain$name),xlab=\"Area (px)\",breaks=cells)\n# hist(exp(strain_int[which(strain_rates==0)]),col=\"grey\",add=T,breaks=cells)\n# hist(exp(strain_int),main=paste(\"Simulated Starting Size for\",strain$name),xlab=\"Area (px)\",breaks=cells)\n# hist(exp(strain_int[which(strain_rates==0)]),col=\"grey\",add=T,breaks=cells)\n# for (i in 1:5){\n#   hist(exp(strain_int[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1])]),col=adjustcolor(colours[i],0.4),breaks=cells,add=T)\n# }\n# legend(\"topright\",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c(\"grey\",colours))\n\n# #Fish Plots (Could write this as a function vis_het_dat())\n# sample=8\n# indices1=sample(dim(strain$area)[1],sample)\n# indices2=sample(max_indices,1)\n# indices3=sample(which(strain_rates==0),1)\n# indices=c(indices1,indices2,indices3)\n# time_indices=seq(1,dim(strain$area)[2],1)\n# timepoints=times[1,time_indices]\n# area_m=as.matrix(strain$area)\n# area_test=area_m[indices,time_indices]\n# pop_data=colSums(area_test)\n# frac.table1=matrix(0,nrow=dim(area_test)[1],ncol=length(timepoints))\n# for (i in 1:dim(area_test)[1]){\n#   frac.table1[i,]=as.numeric(area_test[i,])/as.numeric(pop_data)\n# }\n# frac.table1=frac.table1*100\n# parents=rep(0,dim(area_test)[1])\n# fish = createFishObject(frac.table1,parents,timepoints=timepoints,col=rainbow(sample+2))\n# fish = layoutClones(fish)\n# fishPlot(fish,shape=\"spline\",title.btm=\"Sample1\",\n#          cex.title=0.5, vlines=c(0,150),\n#          vlab=c(\"day 0\",\"day 150\"))\n# title(paste(\"FishPlot for\",datsetname,strain$name))\n",
    "created" : 1466336377314.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "8|21|32|0|\n",
    "hash" : "1913620957",
    "id" : "7F962A0C",
    "lastKnownWriteTime" : 1466345865,
    "last_content_update" : 1466345865814,
    "path" : "~/Documents/MSc/discstoch-master/FormattedData/FinalizedScripts/HelenaAnalysis_FreqDetExpMod.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}