{
    "collab_server" : "",
    "contents" : "# Analysis Script Using the Package\n# Frequentist, Deterministic, Exponential Modelling\n\nlibrary(data.table)\nlibrary(detstocgrowth)\nlibrary(fishplot)\nlibrary(MASS)\nlibrary(bcp)\nlibrary(segmented)\nlibrary(\"Hmisc\")\n\nfor (z in 1:16){\n  dataset<-function(x){\n    if (x == \"Lawless\"){\n      # DataSet1: Lawless\n      area=fread(\"Lawless_area_shortTC.txt\",header=FALSE)\n      times=fread(\"Lawless_time_shortTC.txt\",header=FALSE)\n      data=fread(\"Lawless_data_shortTC.txt\",header=FALSE) #3rd column (Identifier) => strain_parentcolony\n      info=read.table(\"Lawless_GrowthRateInfo.txt\",header=TRUE,row.names=1)\n      names(data)=c(\"genotype\",\"clonalcolony\",\"identifier\",\"blobnumber\")\n      return(list(\"area\"=area,\"data\"=data,\"times\"=times,\"info\"=info))\n    }\n    else if (x == \"Levy\"){\n      # DataSet2: Levy\n      area=fread(\"Levy_area_NF.txt\",header=TRUE)\n      times=fread(\"Levy_time_NF.txt\",header=TRUE)\n      data=fread(\"Levy_data_NF.txt\",header=TRUE) #3rd column (Identifier) => replicate\n      #info=read.table(\"Levy_GrowthRateInfo.txt\",header=TRUE,row.names=1)\n      return(list(\"area\"=area,\"data\"=data,\"times\"=times))\n    }\n    else if (x == \"Ziv\"){\n      # DataSet3: Ziv\n      area=fread(\"Ziv_area_filtered1.txt\",header=FALSE)\n      times=fread(\"Ziv_times_filtered1.txt\",header=FALSE)\n      data=fread(\"Ziv_data_filtered1.txt\",header=TRUE) #3rd column (Identifier) => colony\n      info=read.table(\"Ziv_GrowthRateInfo.txt\",header=TRUE,row.names=1)\n      return(list(\"area\"=area,\"data\"=data,\"times\"=times,\"info\"=info))\n    }\n    else {print(\"Not a valid dataset\")}\n  }\n  \n  # Choosing a data set\n  datsetname=\"Levy\"\n  x=dataset(datsetname)\n  area=x$area\n  times=x$times\n  data=x$data\n  #info=x$info\n  \n  # # Deterministic Bayesian Parameters (currently logistic -> change to exponential ones)\n  # params=c(\"1:100\",\"101:200\",\"201:300\",\"301:400\",\"401:500\",\"501:600\",\"601:700\",\"701:800\",\"801:900\",\n  #          \"901:1000\",\"1001:1100\",\"1101:1200\",\"1201:1300\",\"1301:1400\",\"1401:1500\",\"1501:1600\",\n  #          \"1601:1700\",\"1701:1800\",\"1801:1900\")\n  # \n  # total_params=matrix(0,ncol=2,nrow=length(params)*100+46)\n  # for (i in 1:length(params)){\n  #   #print((1:100)+(100*(i-1)))\n  #   print(params[i])\n  #   total_params[(1:100)+(100*(i-1)),]=as.matrix(read.table(paste(\"~/BayesianInference/Lawless_Bayes_parameters_BayesDetExp_\",params[i],\".txt\",sep=\"\"),header=TRUE))\n  # }\n  # total_params[1901:1946,]=as.matrix(read.table(\"~/BayesianInference/Lawless_Bayes_parameters_BayesDetExp_1901:1946.txt\",header=TRUE))\n  # \n  # # Intercept, Rate, CarryingCapacity\n  # total_rates_bayes=total_params[,2]\n  # rates=total_rates_bayes\n\n  # # Which model to use\n  # \n  # #print(mean(info$Rsquared))\n  # length(which(info$Prob>0.5))\n  # unique(data[which(info$Prob>0.5)]$genotype)\n  # \n  # # Choosing a strain and extracting the data for it\n  strain_names=unique(data$genotype)\n  # #print(strain_names)\n  pickstrain=strain_names[z] #choose strain here!\n  strain=detstocgrowth::subset_strain(data,area,times,pickstrain)\n  # #detstocgrowth::plot_growth(strain$area,strain$times,strain$name,Nsample=50,title=TRUE,hist=TRUE) #dim(strain$area)[1]\n  # \n  #Calculating the estimated growth rates for all growth curves of the strain\n  strain_rates=c()\n  strain_int=c()\n  dist=c()\n  for (i in 1:dim(strain$area)[1]){\n    k=detstocgrowth::LM_growthrate(strain$area[i,],strain$times[i,])$rate\n    intercept=detstocgrowth::LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$int\n    fit=detstocgrowth::LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$fit\n    res=residuals(fit)\n    dist=c(dist,range(res)[1]-range(res)[2])\n    strain_rates=c(strain_rates,k)\n    strain_int=c(strain_int,intercept)\n  }\n\n  #Setting growth rates <0 equal to 0\n  strain_rates[which(strain_rates<0)]=0\n  # \n  # strain_rates=rates[which(data$genotype==pickstrain)]\n  \n  # FishPlot using data simulated from the growth rates over a longer time course and a\n  # starting population of a single cell\n  \n  # # # ######################################################\n  # t=seq(1,96,1)\n  # iter=10000\n  # N0=100\n  # ds=matrix(0,nrow=iter,ncol=length(t))\n  # fs=matrix(0,nrow=iter,ncol=length(t))\n  # for(j in 1:iter){\n  #   print(j)\n  #   # sample_rates=sample(strain_rates,N0-2,replace=TRUE)\n  #   # sample_rates=c(max(strain_rates),sample_rates,0)\n  #   sample_rates=sample(strain_rates,N0,replace=TRUE)\n  #   fid=c(which(sample_rates==max(sample_rates)))\n  #   sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))\n  #   for (i in 1:length(sample_rates)){\n  #     sim_area[i,]=round(detstocgrowth::simExponential(sample_rates[i],t))\n  #   }\n  #   pop_data=colSums(sim_area)\n  #   frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))\n  #   for (i in 1:dim(sim_area)[1]){\n  #     frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)\n  #   }\n  #   frac.table=frac.table*100\n  #   ds[j,]=apply(frac.table,2,function(x) sum(x>5))\n  #   if(length(fid)>1){\n  #     fs[j,]=colSums(frac.table[fid,])\n  #   }else{fs[j,]=frac.table[fid,]}\n  # }\n  # \n  # p5=apply(ds,2,mean)\n  # print(p5)\n  # dr=apply(fs,2,mean)\n  # print(dr)\n  # \n  # name1=paste(\"5P_\",strain$name,\"_\",N0,sep=\"\")\n  # name2=paste(\"DR_\",strain$name,\"_\",N0,sep=\"\")\n  # newinfo=data.frame(p5,dr)\n  # names(newinfo)=c(name1,name2)\n  # info=data.frame(info,newinfo)\n  # \n  # \n  # write.table(info,file=paste(\"MorePlotsData_\",strain$name,\".txt\",sep=\"\"),col.names=TRUE,row.names=FALSE)\n  # \n  # \n  #######################################################\n  fishfun<-function(t,sample_rates){\n    sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))\n    for (i in 1:length(sample_rates)){\n      sim_area[i,]=round(detstocgrowth::simExponential(sample_rates[i],t))\n    }\n    pop_data=colSums(sim_area)\n    frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))\n    for (i in 1:dim(sim_area)[1]){\n      frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)\n    }\n    frac.table=frac.table*100\n    frac.table=floor(frac.table*100)/100#floor(frac.table*1000000)/1000000\n    for (i in 1:dim(frac.table)[1]){\n      if (sum(which(frac.table[i,]==0))>0){\n        frac.table[i,(which(frac.table[i,]==0)[1]):(dim(frac.table)[2])]=0\n      }\n    }\n    \n    if(length(sample_rates)==10000){\n      nogrowth=apply(frac.table,1,function(x) (sum(x)==0.01))\n      frac.table=frac.table[-which(nogrowth==TRUE),]\n      sample_rates=sample_rates[-which(nogrowth==TRUE)]\n    }\n    \n    parents=rep(0,dim(frac.table)[1])\n    # colours=rainbow(11)\n    # gr_range=seq(0.05,0.55,0.05)\n    # colours<-colorRampPalette(c(\"brown\",\"pink\",\"red\", \"yellow\", \"green\", \"darkgreen\",\"blue\",\"cyan\",\"purple\"))(n = 16)\n    # gr_range=seq(0.05,0.8,0.05)\n    colours<-colorRampPalette(c(\"lightyellow\",\"yellow\",\"orange\",\"red\"))(n = 81)\n    gr_range=seq(0,0.4,0.005) \n    ids=sapply(sample_rates,function(x) which(abs(gr_range-x)==min(abs(gr_range-x))))\n    col_list=colours[ids]\n    max_col=colours[sort(unique(ids),decreasing=TRUE)[1:3]]\n    max_strains=sort(unique(sample_rates),decreasing=TRUE)[1:3]\n    fish = fishplot::createFishObject(frac.table,parents,timepoints=t,col=col_list)\n    fish = fishplot::layoutClones(fish)\n    fishplot::fishPlot(fish,shape=\"spline\",title.btm=\" \",vlines=c(5,max(t)),\n                       vlab=c(\"1h\",paste(max(t),\"h\",sep=\"\")),border=0.01,cex.vlab=1.3)\n    #legend(\"left\",legend=signif(max_strains,2),col=max_col,lty=c(1,1,1),lwd=c(3,3,3))\n  }\n\n  t=seq(1,96,1)\n  #t=seq(1,48,1)\n  op=par(mfrow=c(3,1))\n  sample_rates=sample(strain_rates,10000,replace=TRUE)\n  fishfun(t,sample_rates)\n  sample_rates=sample(strain_rates,1000,replace=TRUE)\n  fishfun(t,sample_rates)\n  sample_rates=sample(strain_rates,100,replace=TRUE)\n  fishfun(t,sample_rates)\n  mtext(toString(strain$name), outer = TRUE, cex = 1.5)\n  par(op)\n  title(paste(\"Simulated FishPlots\",datsetname,strain$name))\n  \n  # Getting lag phase estimates for varying population sizes \n  total=dim(strain$area)[1]\n  N=seq(100,10000,100)\n  time=seq(0,96,1)\n  iterations=100\n  meanlaglen=c()\n  upperconf=c()\n  lowerconf=c()\n  varlaglen=c()\n  for(j in N){\n    laglen=c()\n    print(j)\n    for (i in 1:iterations){\n      popsim=pop_sim_dat(strain,strain_rates,j,time,1)\n      popdata=popsim$PopData\n      op_bcp=bcp(as.numeric(log(popdata)),time)\n      max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)\n      breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]\n      if (max_prob>0.5){\n        area=as.numeric(log(popdata))\n        t=time\n        linmod=lm(area~t)\n        segmod=try(segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)\n        if (typeof(segmod)[1]==\"list\"){\n          laglen=c(laglen,segmod$psi[2])\n        }\n      }\n    }\n    meanlaglen=c(meanlaglen,mean(laglen))\n    test=t.test(laglen)\n    lowerconf=c(lowerconf,test$conf.int[1])\n    upperconf=c(upperconf,test$conf.int[2])\n    varlaglen=c(varlaglen,var(laglen))\n  }\n  \n  par(mfrow=c(1,1))\n  plot(c(N),c(yfrmeanlaglen),ylim=c(26,38),xlab=\"Population Start Size (No. of Cells)\",\n       ylab=\"Apparent Lag Phase\",type='l',cex.lab=1.4,col=\"blue\",lwd=2, main=\"Break Point Estimates over Time in \\nPopulation Simulation of    and     \")\n  lines(c(N),yfrupperconf,lty=2,col=\"red\")\n  lines(c(N),yfrlowerconf,lty=2,col=\"red\")\n  lines(c(N),c(meanlaglen),lty=1,col=\"green\",lwd=2)\n  lines(c(N),upperconf,lty=2,col=\"red\")\n  lines(c(N),lowerconf,lty=2,col=\"red\")\n  legend(\"bottomleft\",legend=c(\"YFR054C\",\"SNF6\",\"95 % Conf. Int.\"),lty=c(1,1,2),lwd=c(2,2,1),col=c(\"blue\",\"green\",\"red\"),cex=0.9,bty='n')\n  \n  \n  lines(c(N),c(meanlaglen),lty=2)\n  #http://stackoverflow.com/questions/15063287/add-error-bars-to-show-standard-deviation-on-a-plot-in-r\n  d=data.frame(\"x\"=N,\"y\"=meanlaglen,\"sd\"=sqrt(varlaglen))\n  plot(d$x,d$y,type=\"n\",xlab=\"Population Start Size (No. of Cells)\",ylab=\"Apparent Lag Phase\",main=paste(strain$name))\n  with(data=d,expr=errbar(x,y,y+sd,y-sd,add=T,pch=1,cap=.1))\n  plot(d$x,d$y,type=\"n\",ylim=c(min(d$y-d$sd),max(d$y+d$sd)),xlab=\"Population Start Size (No. of Cells)\",ylab=\"Apparent Lag Phase\",main=paste(strain$name),cex.lab=1.4)\n  with(data=d,expr=errbar(x,y,y+sd,y-sd,add=T,pch=1,cap=.015))\n\n  for (i in 1:iterations){\n    print(i)\n    popsim=pop_sim_dat(strain,strain_rates,1000,time,1)\n    popdata=popsim$PopData\n    poprate=popsim$SimRates\n    op_bcp=bcp(as.numeric(log(popdata)),time)\n    max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)\n    breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]\n    bp_pr=c(bp_pr,max_prob)\n    bp_loc=c(bp_loc,breakpoint_location)\n    if (max_prob>0.5){\n      area=as.numeric(log(popdata))\n      t=time\n      linmod=lm(area~t)\n      segmod=try(segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)\n      if (typeof(segmod)[1]==\"list\"){\n        k=slope(segmod)$t[,1][2]\n        klag=slope(segmod)$t[,1][1]\n      }\n      else{\n        k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate\n        klag=NA\n      }\n    }else{\n      k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate\n      klag=NA\n    }\n    pop_rates=c(pop_rates,k)\n    pop_rates_lag=c(pop_rates_lag,klag)\n  }\n  print(pickstrain)\n  print(mean(bp_pr))\n  print(min(bp_pr))\n  print(time[mean(bp_loc)])\n  print(mean(pop_rates))\n  print(mean(pop_rates[-which(is.na(pop_rates_lag))]))\n  print(mean(pop_rates_lag,na.rm=TRUE))\n  tt=t.test(pop_rates[-which(is.na(pop_rates_lag))],pop_rates_lag[-which(is.na(pop_rates_lag))],conf.level=0.99)\n  print(tt$p.value)\n  colid=which(abs(rev(gr_range)-max(poprate))==min(abs(rev(gr_range)-max(poprate))))\n  #legend(\"topleft\",title=\"Max. Growth Rate\",legend=rev(gr_range)[1:3],col=rev(colours)[1:3],lty=rep(1,3),lwd=rep(3,3))\n  #legend(\"topleft\",title=\"Max. Growth Rate\",legend=rev(gr_range)[colid:(colid+2)],col=rev(colours)[colid:(colid+2)],lty=rep(1,6),lwd=rep(3,6))\n  \n  #detstocgrowth::pop_plot_growth(popdata,time,strain$name,title=TRUE,hist=FALSE)\n  #detstocgrowth::histo(strain_rates,strain$name,c=seq(0,0.4,0.01),SE=FALSE)\n  #box()\n  h=hist(strain_rates,breaks=seq(0,0.65,0.01),plot=FALSE)\n  hcol=colours[sapply(h$mids, function(x) which(abs(gr_range-x)==min(abs(gr_range-x)))[1])]\n  plot(h,col=hcol,cex.lab=1.4)\n  #abline(v=mean(strain_rates),col=\"red\",lwd=3)\n  abline(v=mean(strain_rates),col=\"black\",lwd=3)\n  abline(v=mean(pop_rates),col=\"black\",lwd=3,lty=2)\n  legend(\"topright\",legend=c(\"True Mean\",\"Pop'n Mean\"),col=c(\"black\",\"black\"),lty=c(1,2),lwd=c(3,3),cex=0.6)\n  par(op)\n  \n  # Using 100 growth curves for extrapolation\n  total=dim(strain$area)[1]\n  N=100\n  time=seq(0,96,1)\n  #time=seq(0,48,0.5)\n  \n  # Refitting the exponential model to the newly simulated data to obtain\n  # population growth rate\n  iterations=1000\n  popsim=pop_sim_dat(strain,strain_rates,N,time,iterations)\n  popdata=popsim$PopData\n  poprate=popsim$SimRates\n  print(max(poprate))\n  print(max(strain_rates))\n  \n  png(paste(paste(datsetname,\"_PopSimCol2\",pickstrain,sep=\"_\"),\".png\",sep=\"\"))\n  op=par(mfrow=c(2,1))\n  plot(1,type='n', xlim=range(time), ylim=c(100,10^26),xlab=\"Time (h)\",ylab=\"No. of Cells\",log='y',cex.lab=1.4)\n  #colours<-colorRampPalette(c(\"brown\",\"pink\",\"red\", \"yellow\", \"green\", \"darkgreen\",\"blue\",\"cyan\",\"purple\"))(n = 16)\n  #colours=rainbow(12)\n  # colours=colours[-1]\n  # colours=colours[-1]\n  #gr_range=seq(0.05,0.8,0.05)\n  #gr_range=seq(0.05,0.6,0.05)\n  colours<-colorRampPalette(c(\"lightyellow\",\"yellow\",\"orange\",\"red\"))(n = 131)\n  gr_range=seq(0,0.65,0.005) \n  bp_pr=c()\n  bp_loc=c()\n  pop_rates=c()\n  pop_rates_lag=c()\n  for (i in 1:iterations){\n    print(i)\n    #print((i*100-99)); print((i*100-100+N))\n    #id=which(abs(gr_range-max(poprate[(i*100-99):(i*100-100+N)]))==min(abs(gr_range-max(poprate[(i*100-99):(i*100-100+N)]))))\n    #lines(time,popdata[i,],col=colours[id],lwd=2)\n    popsim=pop_sim_dat(strain,strain_rates,N,time,1)\n    popdata=popsim$PopData\n    poprate=popsim$SimRates\n    id=which(abs(gr_range-max(poprate))==min(abs(gr_range-max(poprate))))\n    lines(time,popdata,col=colours[id],lwd=2)\n    #op_bcp=bcp(log(popdata[i,]),time)\n    op_bcp=bcp(as.numeric(log(popdata)),time)\n    max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)\n    breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]\n    bp_pr=c(bp_pr,max_prob)\n    bp_loc=c(bp_loc,breakpoint_location)\n    if (max_prob==1){\n      #area=log(popdata[i,])\n      area=as.numeric(log(popdata))\n      t=time\n      linmod=lm(area~t)\n      segmod=try(segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)\n      if (typeof(segmod)[1]==\"list\"){\n        k=slope(segmod)$t[,1][2]\n        klag=slope(segmod)$t[,1][1]\n        abline(v=segmod$psi[2],col=adjustcolor(\"black\",0.1),lty=2)\n      }\n      else{\n        #k=detstocgrowth::LM_growthrate(as.numeric(popdata[i,]),time)$rate\n        k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate\n        klag=NA\n      }\n    }else{\n      #k=detstocgrowth::LM_growthrate(as.numeric(popdata[i,]),time)$rate\n      k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate\n      klag=NA\n    }\n    pop_rates=c(pop_rates,k)\n    pop_rates_lag=c(pop_rates_lag,klag)\n  }\n  print(pickstrain)\n  print(mean(bp_pr))\n  print(min(bp_pr))\n  print(time[mean(bp_loc)])\n  print(mean(pop_rates))\n  print(mean(pop_rates[-which(is.na(pop_rates_lag))]))\n  print(mean(pop_rates_lag,na.rm=TRUE))\n  tt=t.test(pop_rates,pop_rates_lag,conf.level=0.99)\n  print(tt$p.value)\n  colid=which(abs(rev(gr_range)-max(poprate))==min(abs(rev(gr_range)-max(poprate))))\n  #legend(\"topleft\",title=\"Max. Growth Rate\",legend=rev(gr_range)[1:3],col=rev(colours)[1:3],lty=rep(1,3),lwd=rep(3,3))\n  #legend(\"topleft\",title=\"Max. Growth Rate\",legend=rev(gr_range)[colid:(colid+2)],col=rev(colours)[colid:(colid+2)],lty=rep(1,6),lwd=rep(3,6))\n  \n  #detstocgrowth::pop_plot_growth(popdata,time,strain$name,title=TRUE,hist=FALSE)\n  #detstocgrowth::histo(strain_rates,strain$name,c=seq(0,0.4,0.01),SE=FALSE)\n  #box()\n  h=hist(strain_rates,breaks=seq(0,0.65,0.01),plot=FALSE)\n  hcol=colours[sapply(h$mids, function(x) which(abs(gr_range-x)==min(abs(gr_range-x)))[1])]\n  plot(h,col=hcol,cex.lab=1.4)\n  abline(v=mean(strain_rates),col=\"red\",lwd=3)\n  abline(v=mean(strain_rates),col=\"black\",lwd=3)\n  #abline(v=mean(pop_rates),col=\"black\",lwd=3,lty=2)\n  abline(v=0.51,col=\"black\",lwd=3,lty=2)\n  abline(v=0.52,col=\"black\",lwd=3,lty=3)\n  abline(v=0.55,col=\"black\",lwd=3,lty=6)\n  legend(\"topleft\",legend=c(\"True Mean\",\"Pop'n Mean (D)\",\"Pop'n Mean (E)\",\"Pop'n Mean (F)\"),\n         col=c(\"black\",\"black\",\"black\",\"black\"),lty=c(1,2,3,6),lwd=c(3,3,3,3))\n  par(op)\n  dev.off()\n}\n\n\n\n#Note indices for all iterations!\npopdata_indices=popsim$indices\n\n# Fitting a piece-wise regression to the Population Simulations\n#piece_op=detstocgrowth::piecewise_pop_rate(popdata,time)\n\n# Analysing how much each growth rate contributes to the pop'n growth during\n# the exponential phase\n# contribution=fast_rate_contribution(piece_op$k2,strain_rates[popdata_indices])\n# filename=paste(\"Contribution_\",datsetname,strain$name,\"_0.1N_c\",\n#                signif(contribution, digits=3),\".png\",sep=\"\")\n\n# # png(filename)\n# op=par(mfrow=c(3,1))\n# detstocgrowth::plot_growth(strain$area[popdata_indices,],strain$times[popdata_indices,],\n#             strain$name,Nsample=100)\n# detstocgrowth::pop_plot_growth(popdata,time,strain$name,hist=FALSE)\n# detstocgrowth::strain_pop_hist(strain$name,strain_rates[popdata_indices],piece_op$k1,piece_op$k2)\n# par(op)\n# # dev.off()\n\n# Changes in variance & value of growth rate estimates with an inceasing\n# size of the starting population\n#N=dim(strain$area)[1]\nN=1000\niterations=100\ntime=seq(0,48,1)\n# total_popsim=detstocgrowth::pop_sim_dat(strain,strain_rates,N,time,iterations)\n# simdata=total_popsim$SimData\n# poprates=total_popsim$SimRates\n\n\n#Sum up one hundred more rows each time\n#N=100\ninit_pop=seq(1,N,1)\nall_simpoprate=list()\nall_simpopratelag=list()\n#all_meansimrates=c()\nfor (i in 1:length(init_pop)){\n  print(i)\n  #init_simmeanrates=c()\n  init_simpoprate=c()\n  init_simpopratelag=c()\n  for (j in 1:iterations){\n    #print(j)\n    total_popsim=detstocgrowth::pop_sim_dat(strain,strain_rates,i,time,1)\n    simdata=total_popsim$PopData\n    #poprates=total_popsim$SimRates\n    #simitdata=colSums(simdata[[1]])\n    simitdata=simdata\n    # if(i==1){\n    #   id=sample(init_pop,1)\n    #   simitdata=simdata[[1]][id,]\n    # }else{\n    #   id=sample(init_pop,i,replace=TRUE)\n    #   simitdata=colSums(simdata[[1]][id,])\n    # }\n    op_bcp=bcp(as.numeric(log(simitdata)),time)\n    max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)\n    breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]\n    if (max_prob>0.5){\n      area=as.numeric(log(simitdata))\n      t=time\n      linmod=lm(area~t)\n      segmod=try(segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)\n      if (typeof(segmod)[1]==\"list\"){\n        k=slope(segmod)$t[,1][2]\n        klag=slope(segmod)$t[,1][1]\n      }\n      else{\n        k=detstocgrowth::LM_growthrate(as.numeric(simitdata),time)$rate\n        klag=NA\n      }\n    }else{\n      k=detstocgrowth::LM_growthrate(as.numeric(simitdata),time)$rate\n      klag=NA\n    }\n    init_simpoprate=c(init_simpoprate,k)\n    init_simpopratelag=c(init_simpopratelag,klag)\n    #simpoprate=detstocgrowth::LM_growthrate(simitdata,time)$rates #Pop'n Rates\n    #init_simpoprate=c(init_simpoprate,simpoprate)\n    #simrates=poprates[id] #Orignial Single Lineage Rates\n    #simrates=poprates\n    #simmmeanrates=mean(simrates) #Mean Original Rates\n    #init_simmeanrates=c(init_simmeanrates,simmmeanrates)\n  }\n  all_simpoprate[[i]]=as.numeric(init_simpoprate)\n  all_simpopratelag[[i]]=as.numeric(init_simpopratelag)\n  #all_meansimrates=c(all_meansimrates,init_simmeanrates)\n}\n#Use all_simpoprate to calculate the mean and variance for each element in the list\n#See whether variance is decreasing with increasing pop'n size\n#See whether different between pop'n mean rate and single lineage mean rate differs\nvariance=c()\nmean=c()\nmeanlag=c()\nvariancelag=c()\nfor (i in 1:length(init_pop)){\n  variance=c(variance,var(all_simpoprate[[i]],na.rm=TRUE))\n  mean=c(mean,mean(all_simpoprate[[i]],na.rm=TRUE))\n  variancelag=c(variancelag,var(all_simpopratelag[[i]],na.rm=TRUE))\n  meanlag=c(meanlag,mean(all_simpopratelag[[i]],na.rm=TRUE))\n}\ntrue_mean=mean(strain_rates)\ntrue_variance=var(strain_rates)\n\n#To get rid of -INF values in variance when taking the log\nvariance[which(variance==0)]=NA\n\n#http://www.r-bloggers.com/r-single-plot-with-two-different-y-axes/\npng(paste(paste(\"Final_PopSimDat\",datsetname,strain$name,signif(true_mean,3),signif(true_variance,3),sep=\"_\"),\".png\",sep=\"\"))\npar(mar=c(5,5,2,5))\nplot(NULL,xlim=range(init_pop),ylim=c(0,0.65),ylab=\"Growth Rate (1/h)\",xlab=\"Initial Population Size (No. of cells)\",cex.lab=1.4,cex.main=1.2)\nfor (i in 1:length(all_simpoprate)){\n  points(rep(init_pop[i],iterations),all_simpoprate[[i]],col=adjustcolor(\"grey\",0.7))\n}\nlines(init_pop,mean,col=adjustcolor(\"darkgreen\",0.7),lwd=2)\nlines(init_pop,meanlag,col=adjustcolor(\"green\",0.7),lwd=2)\nabline(h=true_mean,col=adjustcolor(\"red\",0.7),lwd=3)\npar(new=T)\nd=data.frame(x=init_pop,v=variance,m=mean)\nwith(d,plot(x,v,type='l',col=adjustcolor(\"purple\",0.7),ylim=c(0,max(variance,na.rm=TRUE)),axes=F,xlab=NA,ylab=NA,cex=1.2),lwd=2)\n#loess_fit<-loess(v~x,data=d)\n#init_pop=init_pop[which(variance>0)]\n#lines(init_pop,predict(loess_fit),col=\"darkblue\",lwd=1,lty=1)\naxis(side=4)\nmtext(side=4,line=3,\"Variance\",cex=1.4)\nlines(init_pop,variancelag,col=adjustcolor(\"blue\",0.7),lwd=2)\nlegend(200,0.0085,\n       legend=c(\"Mean Lag Growth\",\"Mean Exponential Growth\",\"True Mean\",\"Lag Variance\",\"Exponential Variance\",\"Pop'n Simulations\"),\n       lty=c(1,1,1,1,1,0),pch=c(NA,NA,NA,NA,NA,1),lwd=c(3,3,3,3,3,3),col=c(\"green\",\"darkgreen\",\"red\",\"blue\",\"purple\",\"grey\"),cex=0.9)\n#title(main=paste(\"Simulated Population Growth Rate for\", datsetname, strain$name))\ndev.off()\n\n####### Aside (One-off Calculations)\n\n# #Calculating the estimate growth rates for all growth curves\n# all_rates=c()\n# all_int=c()\n# all_dist=c()\n# for (i in 1:dim(area)[1]){\n#   k=LM_growthrate(area[i,],times[i,])$rate\n#   intercept=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$int\n#   fit=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$fit\n#   res=studres(fit)\n#   all_dist=c(all_dist,range(res)[1]-range(res)[2])\n#   all_rates=c(all_rates,k)\n#   all_int=c(all_int,intercept)\n# }\n\n# #Saving the range of the residuals according to blob number\n# res_data=cbind(dist,strain$data$clonalcolony,strain$data$blobnumber)\n#\n# #Get rid of NA distances; this means not enough time points\n# all_rates=all_rates[-which(is.na(all_dist))]\n# all_data=data[-which(is.na(all_dist)),]\n# all_dist=all_dist[-which(is.na(all_dist))]\n# all_rates[which(all_rates<0)]=0\n# #Make distance positive\n# all_dist=abs(all_dist)\n# #Save useful info\n# all_res_data=cbind(all_dist,all_rates,data$clonalcolony,data$blobnumber)\n# write.table(all_res_data,\"Lawless_ResRateRange_Filtered_Norm_20.txt\",col.names=FALSE,row.names=FALSE)\n#all_rates[which(all_rates<0)]=0\n\n# # Calibration Curve\n# cells=breaks=seq(0,350,10)\n# col_range=seq(min(strain_rates),max(strain_rates),(max(strain_rates)-min(strain_rates))/5)\n# colours=rainbow(5)\n# strain$area=as.matrix(strain$area)\n# hist(strain$area[,1],main=paste(\"Starting Cell Size for\",strain$name),xlab=\"Area at t=0\",breaks=cells)\n# hist(strain$area[which(strain_rates==0),1],col=\"grey\",add=T,breaks=cells)\n# hist(strain$area[,1],main=paste(\"Starting Cell Size for\",strain$name),xlab=\"Area at t=0\",breaks=cells)\n# hist(strain$area[which(strain_rates==0),1],col=\"grey\",add=T,breaks=cells)\n# for (i in 1:5){\n#   hist(strain$area[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1]),1],col=adjustcolor(colours[i],0.4),breaks=cells,add=T)\n# }\n# legend(\"topright\",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c(\"grey\",colours))\n#\n# mean(strain$area[which(strain_rates<=col_range[1]),1])\n# median(strain$area[which(strain_rates<=col_range[1]),1])\n#\n# area=as.matrix(area)\n# mean(area[which(all_rates==0),1])\n# median(area[which(all_rates==0),1]) #Say this is equal to one cell\n#\n# area_cell=median(area[which(all_rates==0),1])\n# calibrated_area=t(apply(area,1, function(x) x/area_cell))\n#\n# #Getting the blob number of the three fastest rates\n# strain_rates_sorted=sort(strain_rates,decreasing=TRUE)\n# max_rates=strain_rates_sorted[1:3]\n# max_indices=which(strain_rates==max_rates[1]| strain_rates==max_rates[2]|strain_rates==max_rates[3])\n# print(strain$data[max_indices,])\n\n# #Overlay the 2 histograms to show that non-dividing cell start size distribution matches that of the entire pop'n\n# hist(exp(strain_int),main=paste(\"Simulated Starting Size for\",strain$name),xlab=\"Area (px)\",breaks=cells)\n# hist(exp(strain_int[which(strain_rates==0)]),col=\"grey\",add=T,breaks=cells)\n# hist(exp(strain_int),main=paste(\"Simulated Starting Size for\",strain$name),xlab=\"Area (px)\",breaks=cells)\n# hist(exp(strain_int[which(strain_rates==0)]),col=\"grey\",add=T,breaks=cells)\n# for (i in 1:5){\n#   hist(exp(strain_int[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1])]),col=adjustcolor(colours[i],0.4),breaks=cells,add=T)\n# }\n# legend(\"topright\",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c(\"grey\",colours))\n\n# #Fish Plots (Could write this as a function vis_het_dat())\n# sample=8\n# indices1=sample(dim(strain$area)[1],sample)\n# indices2=sample(max_indices,1)\n# indices3=sample(which(strain_rates==0),1)\n# indices=c(indices1,indices2,indices3)\n# time_indices=seq(1,dim(strain$area)[2],1)\n# timepoints=times[1,time_indices]\n# area_m=as.matrix(strain$area)\n# area_test=area_m[indices,time_indices]\n# pop_data=colSums(area_test)\n# frac.table1=matrix(0,nrow=dim(area_test)[1],ncol=length(timepoints))\n# for (i in 1:dim(area_test)[1]){\n#   frac.table1[i,]=as.numeric(area_test[i,])/as.numeric(pop_data)\n# }\n# frac.table1=frac.table1*100\n# parents=rep(0,dim(area_test)[1])\n# fish = createFishObject(frac.table1,parents,timepoints=timepoints,col=rainbow(sample+2))\n# fish = layoutClones(fish)\n# fishPlot(fish,shape=\"spline\",title.btm=\"Sample1\",\n#          cex.title=0.5, vlines=c(0,150),\n#          vlab=c(\"day 0\",\"day 150\"))\n# title(paste(\"FishPlot for\",datsetname,strain$name))\n\n#Example Growth Curve\n\narea[1367,4]=220\narea[1367,5]=250\narea[1367,19]=720\narea[1367,17]=600\narea[1367,16]=550\narea[1367,14]=440\narea[1367,15]=480\nplot(as.numeric(times[1367,]),as.numeric(area[1367,]), cex.lab=1.4,\n     xlab=\"Time (h)\",ylab=\"Area (px)\", main=\"Example Growth Curve on the \\nOriginal Scale\")\nlines(as.numeric(times[1367,]),as.numeric(area[1367,]))\n\nplot(as.numeric(times[1367,]),as.numeric(area[1367,])/92.5, cex.lab=1.4,\n     xlab=\"Time (h)\",ylab=\"No. of Cells\", main=\"Example Growth Curve on the \\nCalibrated Scale\")\nlines(as.numeric(times[1367,]),as.numeric(area[1367,])/92.5)\n\nplot(as.numeric(times[1367,]),as.numeric(area[1367,])/92.5, cex.lab=1.4,\n     xlab=\"Time (h)\",ylab=\"No. of Cells\", main=\"Example Growth Curve on the \\nCalibrated Log Count\",log=\"y\")\nlines(as.numeric(times[1367,]),as.numeric(area[1367,])/92.5)\n\nplot(as.numeric(times[1367,]),log(as.numeric(area[1367,])/92.5), cex.lab=1.4,\n     xlab=\"Time (h)\",ylab=\"log(No. of Cells)\", main=\"Example Growth Curve on the \\nCalibrated Evaluated Log Scale\")\nlines(as.numeric(times[1367,]),log(as.numeric(area[1367,])/92.5))\nfit=lm(log(as.numeric(area[1367,])/92.5)~as.numeric(times[1367,]))\nlines(as.numeric(times[1367,]),fit$fitted.values,lwd=3,col=\"red\")\nlegend(\"topleft\",legend=c(\"Data\",\"Fit\"),pch=c(1,NA),lty=c(1,1),lwd=c(1,2),col=c(\"black\",\"red\"))\n\n\na=which(strain_rates==sort(strain_rates,decreasing=TRUE)[2])\nstrain$area[a,2]=exp(2.5)\nplot(as.numeric(strain$times[a,]),log(as.numeric(strain$area[a,])), cex.lab=1.4,\n     xlab=\"Time (h)\",ylab=\"log(Area (px))\", main=\"Example of a Very Fast Growing Lineage\")\nlines(as.numeric(strain$times[a,]),log(as.numeric(strain$area[a,])))\nfit=lm(log(as.numeric(strain$area[a,]))~as.numeric(strain$times[a,]))\nlines(as.numeric(strain$times[a,]),fit$fitted.values,lwd=3,col=\"red\")\nstrain$data[a,]\n",
    "created" : 1466336377314.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1996483429",
    "id" : "7F962A0C",
    "lastKnownWriteTime" : 1471728868,
    "last_content_update" : 1472141556711,
    "path" : "~/Documents/MSc/discstoch-master/FormattedData/FinalizedScripts/HelenaAnalysis_FreqDetExpMod.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}