datsetname="Lawless"
x=dataset(datsetname)
area=x$area
times=x$times
data=x$data
# Choosing a strain and extracting the data for it
strain_names=unique(data$genotype)
pickstrain=strain_names[1]#choose strain here!
strain=subset_strain(data,area,times,pickstrain)
plot_growth(strain$area,strain$times,strain$name,Nsample=dim(strain$area)[1],hist=TRUE)
#Calculating the estimated growth rates for all growth curves of the strain
strain_rates=c()
strain_int=c()
dist=c()
for (i in 1:dim(strain$area)[1]){
k=LM_growthrate(strain$area[i,],strain$times[i,])$rate
intercept=LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$int
fit=LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$fit
res=residuals(fit)
dist=c(dist,range(res)[1]-range(res)[2])
strain_rates=c(strain_rates,k)
strain_int=c(strain_int,intercept)
}
# zero_indices=which(rowSums(area)==0)
# area=area[-zero_indices,]
# data=data[-zero_indices,]
# times=times[-zero_indices,]
#
all_rates=c()
all_int=c()
all_dist=c()
for (i in 1:dim(area)[1]){
k=LM_growthrate(area[i,],times[i,])$rate
intercept=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$int
fit=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$fit
#res=residuals(fit)
res=studres(fit)
all_dist=c(all_dist,range(res)[1]-range(res)[2])
all_rates=c(all_rates,k)
all_int=c(all_int,intercept)
}
#
# #Saving the range of the residuals according to blob number
# res_data=cbind(dist,strain$data$clonalcolony,strain$data$blobnumber)
#
# #Get rid of NA distances; this means not enough time points
# all_rates=all_rates[-which(is.na(all_dist))]
# all_data=data[-which(is.na(all_dist)),]
# all_dist=all_dist[-which(is.na(all_dist))]
# all_rates[which(all_rates<0)]=0
# #Make distance positive
# all_dist=abs(all_dist)
# #Save useful info
# all_res_data=cbind(all_dist,all_rates,data$clonalcolony,data$blobnumber)
# write.table(all_res_data,"Lawless_ResRateRange_Filtered_Norm_20.txt",col.names=FALSE,row.names=FALSE)
#Setting growth rates <0 equal to 0
strain_rates[which(strain_rates<0)]=0
all_rates[which(all_rates<0)]=0
# Calibration Curve
cells=breaks=seq(0,350,10)
col_range=seq(min(strain_rates),max(strain_rates),(max(strain_rates)-min(strain_rates))/5)
colours=rainbow(5)
strain$area=as.matrix(strain$area)
hist(strain$area[,1],main=paste("Starting Cell Size for",strain$name),xlab="Area at t=0",breaks=cells)
hist(strain$area[which(strain_rates==0),1],col="grey",add=T,breaks=cells)
hist(strain$area[,1],main=paste("Starting Cell Size for",strain$name),xlab="Area at t=0",breaks=cells)
hist(strain$area[which(strain_rates==0),1],col="grey",add=T,breaks=cells)
for (i in 1:5){
hist(strain$area[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1]),1],col=adjustcolor(colours[i],0.4),breaks=cells,add=T)
}
legend("topright",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c("grey",colours))
#Overlay the 2 histograms to show that non-dividing cell start size distribution matches that of the entire pop'n
hist(exp(strain_int),main=paste("Simulated Starting Size for",strain$name),xlab="Area (px)",breaks=cells)
hist(exp(strain_int[which(strain_rates==0)]),col="grey",add=T,breaks=cells)
hist(exp(strain_int),main=paste("Simulated Starting Size for",strain$name),xlab="Area (px)",breaks=cells)
hist(exp(strain_int[which(strain_rates==0)]),col="grey",add=T,breaks=cells)
for (i in 1:5){
hist(exp(strain_int[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1])]),col=adjustcolor(colours[i],0.4),breaks=cells,add=T)
}
legend("topright",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c("grey",colours))
#Not really a convincing argument at the moment....
mean(strain$area[which(strain_rates<=col_range[1]),1])
median(strain$area[which(strain_rates<=col_range[1]),1])
area=as.matrix(area)
mean(area[which(all_rates==0),1])
median(area[which(all_rates==0),1]) #Say this is equal to one cell
area_cell=median(area[which(all_rates==0),1])
calibrated_area=t(apply(area,1, function(x) x/area_cell))
#Plotting true area versus calibrated growth curves
#Getting the blob number of the three fastest rates
strain_rates_sorted=sort(strain_rates,decreasing=TRUE)
max_rates=strain_rates_sorted[1:3]
max_indices=which(strain_rates==max_rates[1]| strain_rates==max_rates[2]|strain_rates==max_rates[3])
print(strain$data[max_indices,])
# #Fish Plots (Could write this as a function vis_het_dat())
# sample=8
# indices1=sample(dim(strain$area)[1],sample)
# indices2=sample(max_indices,1)
# indices3=sample(which(strain_rates==0),1)
# indices=c(indices1,indices2,indices3)
# time_indices=seq(1,dim(strain$area)[2],1)
# timepoints=times[1,time_indices]
# area_m=as.matrix(strain$area)
# area_test=area_m[indices,time_indices]
# pop_data=colSums(area_test)
# frac.table1=matrix(0,nrow=dim(area_test)[1],ncol=length(timepoints))
# for (i in 1:dim(area_test)[1]){
#   frac.table1[i,]=as.numeric(area_test[i,])/as.numeric(pop_data)
# }
# frac.table1=frac.table1*100
# parents=rep(0,dim(area_test)[1])
# fish = createFishObject(frac.table1,parents,timepoints=timepoints,col=rainbow(sample+2))
# fish = layoutClones(fish)
# fishPlot(fish,shape="spline",title.btm="Sample1",
#          cex.title=0.5, vlines=c(0,150),
#          vlab=c("day 0","day 150"))
# title(paste("FishPlot for",datsetname,strain$name))
# FishPlot using data simulated from the growth rates over a longer time course and a
# starting population of a single cell
sample_rates=sample(strain_rates,8)
sample_rates=c(max(strain_rates),sample_rates,0)
# Simulating growth curves using the above rates
t=seq(1,48,1)
sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))
for (i in 1:length(sample_rates)){
sim_area[i,]=round(simExponential(sample_rates[i],t))
}
pop_data=colSums(sim_area)
frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))
for (i in 1:dim(sim_area)[1]){
frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)
}
frac.table=frac.table*100
frac.table=trunc(frac.table)
parents=rep(0,dim(sim_area)[1])
fish = createFishObject(frac.table,parents,timepoints=t,col=rainbow(length(sample_rates)))
fish = layoutClones(fish)
fishPlot(fish,shape="spline",title.btm=paste(strain$name),
cex.title=0.5, vlines=c(0,max(t)),
vlab=c("1h","48h"))
title(paste("FishPlot for",datsetname,strain$name))
# Analysis Script Using the Package
# Frequentist, Deterministic, Exponential Modelling
setwd("~/Documents/MSc/discstoch-master/FormattedData/FinalizedScripts")
library(data.table)
library(detstocgrowth)
library(fishplot)
library(MASS)
dataset<-function(x){
if (x == "Lawless"){
# DataSet1: Lawless
area=fread("Lawless_area_revised.txt",header=FALSE)
times=fread("Lawless_time_revised.txt",header=FALSE)
data=fread("Lawless_data_revised.txt",header=FALSE) #3rd column (Identifier) => strain_parentcolony
names(data)=c("genotype","clonalcolony","identifier","blobnumber")
return(list("area"=area,"data"=data,"times"=times,"residuals"=residuals))
}
else if (x == "Levy"){
# DataSet2: Levy
area=fread("Levy_area_filtered.txt",header=FALSE)
times=fread("Levy_times_filtered.txt",header=FALSE)
data=fread("Levy_data_filtered.txt",header=TRUE) #3rd column (Identifier) => replicate
return(list("area"=area,"data"=data,"times"=times,"residuals"=residuals))
}
else if (x == "Ziv"){
# DataSet3: Ziv
area=fread("Ziv_area_filtered1.txt",header=FALSE)
times=fread("Ziv_times_filtered1.txt",header=FALSE)
data=fread("Ziv_data_filtered1.txt",header=TRUE) #3rd column (Identifier) => colony
return(list("area"=area,"data"=data,"times"=times,"residuals"=residuals))
}
else {print("Not a valid dataset")}
}
# Choosing a data set
datsetname="Lawless"
x=dataset(datsetname)
area=x$area
times=x$times
data=x$data
# Choosing a strain and extracting the data for it
strain_names=unique(data$genotype)
pickstrain=strain_names[1]#choose strain here!
strain=subset_strain(data,area,times,pickstrain)
plot_growth(strain$area,strain$times,strain$name,Nsample=dim(strain$area)[1],hist=TRUE)
#Calculating the estimated growth rates for all growth curves of the strain
strain_rates=c()
strain_int=c()
dist=c()
for (i in 1:dim(strain$area)[1]){
k=LM_growthrate(strain$area[i,],strain$times[i,])$rate
intercept=LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$int
fit=LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$fit
res=residuals(fit)
dist=c(dist,range(res)[1]-range(res)[2])
strain_rates=c(strain_rates,k)
strain_int=c(strain_int,intercept)
}
# zero_indices=which(rowSums(area)==0)
# area=area[-zero_indices,]
# data=data[-zero_indices,]
# times=times[-zero_indices,]
#
all_rates=c()
all_int=c()
all_dist=c()
for (i in 1:dim(area)[1]){
k=LM_growthrate(area[i,],times[i,])$rate
intercept=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$int
fit=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$fit
#res=residuals(fit)
res=studres(fit)
all_dist=c(all_dist,range(res)[1]-range(res)[2])
all_rates=c(all_rates,k)
all_int=c(all_int,intercept)
}
#
# #Saving the range of the residuals according to blob number
# res_data=cbind(dist,strain$data$clonalcolony,strain$data$blobnumber)
#
# #Get rid of NA distances; this means not enough time points
# all_rates=all_rates[-which(is.na(all_dist))]
# all_data=data[-which(is.na(all_dist)),]
# all_dist=all_dist[-which(is.na(all_dist))]
# all_rates[which(all_rates<0)]=0
# #Make distance positive
# all_dist=abs(all_dist)
# #Save useful info
# all_res_data=cbind(all_dist,all_rates,data$clonalcolony,data$blobnumber)
# write.table(all_res_data,"Lawless_ResRateRange_Filtered_Norm_20.txt",col.names=FALSE,row.names=FALSE)
#Setting growth rates <0 equal to 0
strain_rates[which(strain_rates<0)]=0
all_rates[which(all_rates<0)]=0
# Calibration Curve
cells=breaks=seq(0,350,10)
col_range=seq(min(strain_rates),max(strain_rates),(max(strain_rates)-min(strain_rates))/5)
colours=rainbow(5)
strain$area=as.matrix(strain$area)
hist(strain$area[,1],main=paste("Starting Cell Size for",strain$name),xlab="Area at t=0",breaks=cells)
hist(strain$area[which(strain_rates==0),1],col="grey",add=T,breaks=cells)
hist(strain$area[,1],main=paste("Starting Cell Size for",strain$name),xlab="Area at t=0",breaks=cells)
hist(strain$area[which(strain_rates==0),1],col="grey",add=T,breaks=cells)
for (i in 1:5){
hist(strain$area[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1]),1],col=adjustcolor(colours[i],0.4),breaks=cells,add=T)
}
legend("topright",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c("grey",colours))
#Overlay the 2 histograms to show that non-dividing cell start size distribution matches that of the entire pop'n
hist(exp(strain_int),main=paste("Simulated Starting Size for",strain$name),xlab="Area (px)",breaks=cells)
hist(exp(strain_int[which(strain_rates==0)]),col="grey",add=T,breaks=cells)
hist(exp(strain_int),main=paste("Simulated Starting Size for",strain$name),xlab="Area (px)",breaks=cells)
hist(exp(strain_int[which(strain_rates==0)]),col="grey",add=T,breaks=cells)
for (i in 1:5){
hist(exp(strain_int[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1])]),col=adjustcolor(colours[i],0.4),breaks=cells,add=T)
}
legend("topright",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c("grey",colours))
#Not really a convincing argument at the moment....
mean(strain$area[which(strain_rates<=col_range[1]),1])
median(strain$area[which(strain_rates<=col_range[1]),1])
area=as.matrix(area)
mean(area[which(all_rates==0),1])
median(area[which(all_rates==0),1]) #Say this is equal to one cell
area_cell=median(area[which(all_rates==0),1])
calibrated_area=t(apply(area,1, function(x) x/area_cell))
#Plotting true area versus calibrated growth curves
#Getting the blob number of the three fastest rates
strain_rates_sorted=sort(strain_rates,decreasing=TRUE)
max_rates=strain_rates_sorted[1:3]
max_indices=which(strain_rates==max_rates[1]| strain_rates==max_rates[2]|strain_rates==max_rates[3])
print(strain$data[max_indices,])
# #Fish Plots (Could write this as a function vis_het_dat())
# sample=8
# indices1=sample(dim(strain$area)[1],sample)
# indices2=sample(max_indices,1)
# indices3=sample(which(strain_rates==0),1)
# indices=c(indices1,indices2,indices3)
# time_indices=seq(1,dim(strain$area)[2],1)
# timepoints=times[1,time_indices]
# area_m=as.matrix(strain$area)
# area_test=area_m[indices,time_indices]
# pop_data=colSums(area_test)
# frac.table1=matrix(0,nrow=dim(area_test)[1],ncol=length(timepoints))
# for (i in 1:dim(area_test)[1]){
#   frac.table1[i,]=as.numeric(area_test[i,])/as.numeric(pop_data)
# }
# frac.table1=frac.table1*100
# parents=rep(0,dim(area_test)[1])
# fish = createFishObject(frac.table1,parents,timepoints=timepoints,col=rainbow(sample+2))
# fish = layoutClones(fish)
# fishPlot(fish,shape="spline",title.btm="Sample1",
#          cex.title=0.5, vlines=c(0,150),
#          vlab=c("day 0","day 150"))
# title(paste("FishPlot for",datsetname,strain$name))
# FishPlot using data simulated from the growth rates over a longer time course and a
# starting population of a single cell
sample_rates=sample(strain_rates,8)
sample_rates=c(max(strain_rates),sample_rates,0)
# Simulating growth curves using the above rates
t=seq(1,48,1)
sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))
for (i in 1:length(sample_rates)){
sim_area[i,]=round(simExponential(sample_rates[i],t))
}
pop_data=colSums(sim_area)
frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))
for (i in 1:dim(sim_area)[1]){
frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)
}
frac.table=frac.table*100
frac.table=trunc(frac.table)
parents=rep(0,dim(sim_area)[1])
fish = createFishObject(frac.table,parents,timepoints=t,col=rainbow(length(sample_rates)))
fish = layoutClones(fish)
fishPlot(fish,shape="spline",title.btm=paste(strain$name),
cex.title=0.5, vlines=c(0,max(t)),
vlab=c("1h","48h"))
title(paste("FishPlot for",datsetname,strain$name))
# Analysis Script Using the Package
# Frequentist, Deterministic, Exponential Modelling
setwd("~/Documents/MSc/discstoch-master/FormattedData/FinalizedScripts")
library(data.table)
library(detstocgrowth)
library(fishplot)
library(MASS)
dataset<-function(x){
if (x == "Lawless"){
# DataSet1: Lawless
area=fread("Lawless_area_revised.txt",header=FALSE)
times=fread("Lawless_time_revised.txt",header=FALSE)
data=fread("Lawless_data_revised.txt",header=FALSE) #3rd column (Identifier) => strain_parentcolony
names(data)=c("genotype","clonalcolony","identifier","blobnumber")
return(list("area"=area,"data"=data,"times"=times,"residuals"=residuals))
}
else if (x == "Levy"){
# DataSet2: Levy
area=fread("Levy_area_filtered.txt",header=FALSE)
times=fread("Levy_times_filtered.txt",header=FALSE)
data=fread("Levy_data_filtered.txt",header=TRUE) #3rd column (Identifier) => replicate
return(list("area"=area,"data"=data,"times"=times,"residuals"=residuals))
}
else if (x == "Ziv"){
# DataSet3: Ziv
area=fread("Ziv_area_filtered1.txt",header=FALSE)
times=fread("Ziv_times_filtered1.txt",header=FALSE)
data=fread("Ziv_data_filtered1.txt",header=TRUE) #3rd column (Identifier) => colony
return(list("area"=area,"data"=data,"times"=times,"residuals"=residuals))
}
else {print("Not a valid dataset")}
}
# Choosing a data set
datsetname="Lawless"
x=dataset(datsetname)
area=x$area
times=x$times
data=x$data
# Choosing a strain and extracting the data for it
strain_names=unique(data$genotype)
pickstrain=strain_names[2]#choose strain here!
strain=subset_strain(data,area,times,pickstrain)
plot_growth(strain$area,strain$times,strain$name,Nsample=dim(strain$area)[1],hist=TRUE)
#Calculating the estimated growth rates for all growth curves of the strain
strain_rates=c()
strain_int=c()
dist=c()
for (i in 1:dim(strain$area)[1]){
k=LM_growthrate(strain$area[i,],strain$times[i,])$rate
intercept=LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$int
fit=LM_growthrate(as.numeric(strain$area[i,]),as.numeric(strain$times[i,]))$fit
res=residuals(fit)
dist=c(dist,range(res)[1]-range(res)[2])
strain_rates=c(strain_rates,k)
strain_int=c(strain_int,intercept)
}
# zero_indices=which(rowSums(area)==0)
# area=area[-zero_indices,]
# data=data[-zero_indices,]
# times=times[-zero_indices,]
#
all_rates=c()
all_int=c()
all_dist=c()
for (i in 1:dim(area)[1]){
k=LM_growthrate(area[i,],times[i,])$rate
intercept=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$int
fit=LM_growthrate(as.numeric(area[i,]),as.numeric(times[i,]))$fit
#res=residuals(fit)
res=studres(fit)
all_dist=c(all_dist,range(res)[1]-range(res)[2])
all_rates=c(all_rates,k)
all_int=c(all_int,intercept)
}
#
# #Saving the range of the residuals according to blob number
# res_data=cbind(dist,strain$data$clonalcolony,strain$data$blobnumber)
#
# #Get rid of NA distances; this means not enough time points
# all_rates=all_rates[-which(is.na(all_dist))]
# all_data=data[-which(is.na(all_dist)),]
# all_dist=all_dist[-which(is.na(all_dist))]
# all_rates[which(all_rates<0)]=0
# #Make distance positive
# all_dist=abs(all_dist)
# #Save useful info
# all_res_data=cbind(all_dist,all_rates,data$clonalcolony,data$blobnumber)
# write.table(all_res_data,"Lawless_ResRateRange_Filtered_Norm_20.txt",col.names=FALSE,row.names=FALSE)
#Setting growth rates <0 equal to 0
strain_rates[which(strain_rates<0)]=0
all_rates[which(all_rates<0)]=0
# Calibration Curve
cells=breaks=seq(0,350,10)
col_range=seq(min(strain_rates),max(strain_rates),(max(strain_rates)-min(strain_rates))/5)
colours=rainbow(5)
strain$area=as.matrix(strain$area)
hist(strain$area[,1],main=paste("Starting Cell Size for",strain$name),xlab="Area at t=0",breaks=cells)
hist(strain$area[which(strain_rates==0),1],col="grey",add=T,breaks=cells)
hist(strain$area[,1],main=paste("Starting Cell Size for",strain$name),xlab="Area at t=0",breaks=cells)
hist(strain$area[which(strain_rates==0),1],col="grey",add=T,breaks=cells)
for (i in 1:5){
hist(strain$area[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1]),1],col=adjustcolor(colours[i],0.4),breaks=cells,add=T)
}
legend("topright",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c("grey",colours))
#Overlay the 2 histograms to show that non-dividing cell start size distribution matches that of the entire pop'n
hist(exp(strain_int),main=paste("Simulated Starting Size for",strain$name),xlab="Area (px)",breaks=cells)
hist(exp(strain_int[which(strain_rates==0)]),col="grey",add=T,breaks=cells)
hist(exp(strain_int),main=paste("Simulated Starting Size for",strain$name),xlab="Area (px)",breaks=cells)
hist(exp(strain_int[which(strain_rates==0)]),col="grey",add=T,breaks=cells)
for (i in 1:5){
hist(exp(strain_int[which(strain_rates>col_range[i] & strain_rates<=col_range[i+1])]),col=adjustcolor(colours[i],0.4),breaks=cells,add=T)
}
legend("topright",legend=round(col_range,2),pch=rep(0,length(col_range)),col=c("grey",colours))
#Not really a convincing argument at the moment....
mean(strain$area[which(strain_rates<=col_range[1]),1])
median(strain$area[which(strain_rates<=col_range[1]),1])
area=as.matrix(area)
mean(area[which(all_rates==0),1])
median(area[which(all_rates==0),1]) #Say this is equal to one cell
area_cell=median(area[which(all_rates==0),1])
calibrated_area=t(apply(area,1, function(x) x/area_cell))
#Plotting true area versus calibrated growth curves
#Getting the blob number of the three fastest rates
strain_rates_sorted=sort(strain_rates,decreasing=TRUE)
max_rates=strain_rates_sorted[1:3]
max_indices=which(strain_rates==max_rates[1]| strain_rates==max_rates[2]|strain_rates==max_rates[3])
print(strain$data[max_indices,])
# #Fish Plots (Could write this as a function vis_het_dat())
# sample=8
# indices1=sample(dim(strain$area)[1],sample)
# indices2=sample(max_indices,1)
# indices3=sample(which(strain_rates==0),1)
# indices=c(indices1,indices2,indices3)
# time_indices=seq(1,dim(strain$area)[2],1)
# timepoints=times[1,time_indices]
# area_m=as.matrix(strain$area)
# area_test=area_m[indices,time_indices]
# pop_data=colSums(area_test)
# frac.table1=matrix(0,nrow=dim(area_test)[1],ncol=length(timepoints))
# for (i in 1:dim(area_test)[1]){
#   frac.table1[i,]=as.numeric(area_test[i,])/as.numeric(pop_data)
# }
# frac.table1=frac.table1*100
# parents=rep(0,dim(area_test)[1])
# fish = createFishObject(frac.table1,parents,timepoints=timepoints,col=rainbow(sample+2))
# fish = layoutClones(fish)
# fishPlot(fish,shape="spline",title.btm="Sample1",
#          cex.title=0.5, vlines=c(0,150),
#          vlab=c("day 0","day 150"))
# title(paste("FishPlot for",datsetname,strain$name))
# FishPlot using data simulated from the growth rates over a longer time course and a
# starting population of a single cell
sample_rates=sample(strain_rates,8)
sample_rates=c(max(strain_rates),sample_rates,0)
# Simulating growth curves using the above rates
t=seq(1,48,1)
sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))
for (i in 1:length(sample_rates)){
sim_area[i,]=round(simExponential(sample_rates[i],t))
}
pop_data=colSums(sim_area)
frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))
for (i in 1:dim(sim_area)[1]){
frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)
}
frac.table=frac.table*100
frac.table=trunc(frac.table)
parents=rep(0,dim(sim_area)[1])
fish = createFishObject(frac.table,parents,timepoints=t,col=rainbow(length(sample_rates)))
fish = layoutClones(fish)
fishPlot(fish,shape="spline",title.btm=paste(strain$name),
cex.title=0.5, vlines=c(0,max(t)),
vlab=c("1h","48h"))
title(paste("FishPlot for",datsetname,strain$name))
# starting population of a single cell
sample_rates=sample(strain_rates,8)
sample_rates=c(max(strain_rates),sample_rates,0)
# Simulating growth curves using the above rates
t=seq(1,48,1)
sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))
for (i in 1:length(sample_rates)){
sim_area[i,]=round(simExponential(sample_rates[i],t))
}
pop_data=colSums(sim_area)
frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))
for (i in 1:dim(sim_area)[1]){
frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)
}
frac.table=frac.table*100
frac.table=trunc(frac.table)
parents=rep(0,dim(sim_area)[1])
fish = createFishObject(frac.table,parents,timepoints=t,col=rainbow(length(sample_rates)))
fish = layoutClones(fish)
fishPlot(fish,shape="spline",title.btm=paste(strain$name),
cex.title=0.5, vlines=c(0,max(t)),
vlab=c("1h","48h"))
title(paste("FishPlot for",datsetname,strain$name))
