pop_comoposition(sample_rates,time,growthraterange)
set.seed(1)
N=10000
sample_rates=sample(strain_rates,N,replace=TRUE)
time=seq(1,48)
pop_comoposition(sample_rates,time,growthraterange)
pop_composition_dat<-function(t,iter,N0,strain_rates){
ds=matrix(0,nrow=iter,ncol=length(t))
fs=matrix(0,nrow=iter,ncol=length(t))
for(j in 1:iter){
sample_rates=sample(strain_rates,N0,replace=TRUE)
fid=c(which(sample_rates==max(sample_rates)))
sim_area=matrix(0,ncol=length(t),nrow=length(sample_rates))
for (i in 1:length(sample_rates)){
sim_area[i,]=round(detstocgrowth::simExponential(sample_rates[i],t))
}
pop_data=colSums(sim_area)
frac.table=matrix(0,nrow=dim(sim_area)[1],ncol=length(t))
for (i in 1:dim(sim_area)[1]){
frac.table[i,]=as.numeric(sim_area[i,])/as.numeric(pop_data)
}
frac.table=frac.table*100
ds[j,]=apply(frac.table,2,function(x) sum(x>5))
if(length(fid)>1){
fs[j,]=colSums(frac.table[fid,])
}else{fs[j,]=frac.table[fid,]}
}
p5=apply(ds,2,mean)
print(p5)
dr=apply(fs,2,mean)
print(dr)
name1=paste("5P_",strain$name,"_",N0,sep="")
name2=paste("DR_",strain$name,"_",N0,sep="")
newinfo=data.frame(p5,dr)
names(newinfo)=c(name1,name2)
return(newinfo)
}
pop_composition_dat(t,iter,10,strain_rates)
iter=100
pop_composition_dat(t,iter,10,strain_rates)
devtools::document()
library(detstocgrowth)
t=seq(1,48,1)
iter=1000
StartPops=c(50,100,500,1000,5000,10000)
StartPops=c(50,100,500)
info=c()
for (N in StartPops){
newinfo=pop_composition_dat(t,iter,N,strain_rates)
info=data.frame(info,newinfo)
}
N
info=c()
newinfo=pop_composition_dat(t,iter,N,strain_rates)
head(newinfo)
info=data.frame(info,newinfo)
t=seq(1,48,1)
iter=1000
StartPops=c(50,100,500,1000,5000,10000)
StartPops=c(50,100,500)
for (N in StartPops){
newinfo=pop_composition_dat(t,iter,N,strain_rates)
if (N==StartPops[1]){
info=newinfo
} else{
info=data.frame(info,newinfo)
}
}
head(info)
colours=rep(c(rainbow(6)),2)
par(mfrow=c(1,2))
info=as.matrix(info)
plot(NULL,xlim=range(t),ylim=c(0,5),main=paste("Lineages which make up more \nthan 5% of the", strain_name1, "Population"),
xlab="Time (h)", ylab="Number of Lineages",cex.lab=1.4)
for(i in c(1,3,5)){
lines(t,info[,i],lty=1,col=colours[i],lwd=3)
}
colours=rep(c(rainbow(6)),2)
par(mfrow=c(1,2))
info=as.matrix(info)
plot(NULL,xlim=range(t),ylim=c(0,10),main=paste("Lineages which make up more \nthan 5% of the", strain$name, "Population"),
xlab="Time (h)", ylab="Number of Lineages",cex.lab=1.4)
for(i in c(1,3,5)){
lines(t,info[,i],lty=1,col=colours[i],lwd=3)
}
# Plotting the Number of Lineages which make up more than 5% over time
colours=rep(c(rainbow(6)),2)
par(mfrow=c(1,2))
info=as.matrix(info)
plot(NULL,xlim=range(t),ylim=c(0,10),main=paste("Lineages which make up more \nthan 5% of the", strain$name, "Population"),
xlab="Time (h)", ylab="Number of Lineages",cex.lab=1.4)
for(i in c(1,3,5)){
lines(t,info[,i],lty=1,col=colours[i],lwd=3)
}
plot(NULL,xlim=range(t),ylim=c(0,100),main=paste("Dominance ratios for the fastest lineage \n in the",strain_name1,"Population"),
xlab="Time (h)", ylab="Percent",cex.lab=1.4)
for(i in c(2,4,6)){
lines(t,info[,i],lty=1,col=colours[i],lwd=3)
}
# Plotting the Number of Lineages which make up more than 5% over time
colours=rep(c(rainbow(6)))
par(mfrow=c(1,2))
info=as.matrix(info)
plot(NULL,xlim=range(t),ylim=c(0,10),main=paste("Lineages which make up more \nthan 5% of the", strain$name, "Population"),
xlab="Time (h)", ylab="Number of Lineages",cex.lab=1.4)
for(i in c(1,3,5)){
lines(t,info[,i],lty=1,col=colours[i],lwd=3)
}
plot(NULL,xlim=range(t),ylim=c(0,100),main=paste("Dominance ratios for the fastest lineage \n in the",strain_name1,"Population"),
xlab="Time (h)", ylab="Percent",cex.lab=1.4)
for(i in c(2,4,6)){
lines(t,info[,i],lty=1,col=colours[i-1],lwd=3)
}
colours=rep(c(rainbow(6)))
par(mfrow=c(1,2))
info=as.matrix(info)
plot(NULL,xlim=range(t),ylim=c(0,10),main=paste("Lineages which make up more \nthan 5% of the", strain$name, "Population"),
xlab="Time (h)", ylab="Number of Lineages",cex.lab=1.4)
for(i in c(1,3,5,7,9)){
lines(t,info[,i],lty=1,col=colours[i],lwd=3)
}
plot(NULL,xlim=range(t),ylim=c(0,100),main=paste("Dominance ratios for the fastest lineage \n in the",strain$name,"Population"),
xlab="Time (h)", ylab="Percent",cex.lab=1.4)
for(i in c(2,4,6,8,10)){
lines(t,info[,i],lty=1,col=colours[i-1],lwd=3)
}
legend("topright",legend=c("N=50","N=100","N=500","N=1000","N=5000","N=10000"),lwd=rep(3,6),col=colours[1:6])
N=seq(100,10000,100)
N=c(100,200)
time=seq(0,48,1)
iterations=10
lagduration(strain=0,strain_rates,t,N,iterations)
strainlag=lagduration(strain,strain_rates,t,N,iterations)
strainlag=lagduration(strain=0,strain_rates,t,N,iterations)
# Plotting lag duration for the six different distributions
par(mfrow=c(1,1))
plot(c(N),c(strainlag$m),ylim=c(15,50),xlab="Population Start Size (No. of Cells)",
ylab="Apparent Lag Phase",type='l',cex.lab=1.4,col="cyan",lwd=2,
main="Break Point Estimates over Time in \nPopulation Simulation of    and     ")
lines(c(N),strainlag$uc,lty=2,col=adjustcolor("red",0.6))
lines(c(N),strainlag$lc,lty=2,col=adjustcolor("red",0.6))
pop_sim_plot
pop_sim_plot<-function(strain,strain_rates,gr,yl,it){
plot(1,type='n', xlim=range(time), ylim=c(100,yl),xlab="Time (h)",ylab="No. of Cells",log='y',cex.lab=1.4)
colours<-colorRampPalette(c("lightyellow","yellow","orange","red"))(n = length(gr))
gr_range=gr
bp_pr=c()
bp_loc=c()
pop_rates=c()
pop_rates_lag=c()
for (i in 1:it){
popsim=pop_sim_dat(strain,strain_rates,N,time,1)
popdata=popsim$PopData
poprate=popsim$SimRates
id=which(abs(gr_range-max(poprate))==min(abs(gr_range-max(poprate))))
lines(time,popdata,col=colours[id],lwd=2)
op_bcp=bcp(as.numeric(log(popdata)),time)
max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)
breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]
bp_pr=c(bp_pr,max_prob)
bp_loc=c(bp_loc,breakpoint_location)
if (max_prob==1){
area=as.numeric(log(popdata))
t=time
linmod=lm(area~t)
segmod=try(segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)
if (typeof(segmod)[1]=="list"){
k=slope(segmod)$t[,1][2]
klag=slope(segmod)$t[,1][1]
abline(v=segmod$psi[2],col=adjustcolor("black",0.1),lty=2)
}
else{
k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate
klag=NA
}
}else{
k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate
klag=NA
}
pop_rates=c(pop_rates,k)
pop_rates_lag=c(pop_rates_lag,klag)
}
return("bp_pr"=bp_pr,"bp_loc"=bp_loc,"pop_rates"=pop_rates,"pop_rates_lag"=pop_rates_lag)
}
iterations=1000
yl=10^22
gr=seq(0,0.5,0.005)
N=100
pop_sim_plot(strain,strain_rates,gr,yl,it)
pop_sim_plot(strain,strain_rates,gr,yl,iterations)
pop_sim_plot<-function(strain,strain_rates,gr,yl,it){
plot(1,type='n', xlim=range(time), ylim=c(100,yl),xlab="Time (h)",ylab="No. of Cells",log='y',cex.lab=1.4)
colours<-colorRampPalette(c("lightyellow","yellow","orange","red"))(n = length(gr))
gr_range=gr
bp_pr=c()
bp_loc=c()
pop_rates=c()
pop_rates_lag=c()
for (i in 1:it){
popsim=pop_sim_dat(strain=0,strain_rates,N,time,1)
popdata=popsim$PopData
poprate=popsim$SimRates
id=which(abs(gr_range-max(poprate))==min(abs(gr_range-max(poprate))))
lines(time,popdata,col=colours[id],lwd=2)
op_bcp=bcp(as.numeric(log(popdata)),time)
max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)
breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]
bp_pr=c(bp_pr,max_prob)
bp_loc=c(bp_loc,breakpoint_location)
if (max_prob==1){
area=as.numeric(log(popdata))
t=time
linmod=lm(area~t)
segmod=try(segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)
if (typeof(segmod)[1]=="list"){
k=slope(segmod)$t[,1][2]
klag=slope(segmod)$t[,1][1]
abline(v=segmod$psi[2],col=adjustcolor("black",0.1),lty=2)
}
else{
k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate
klag=NA
}
}else{
k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate
klag=NA
}
pop_rates=c(pop_rates,k)
pop_rates_lag=c(pop_rates_lag,klag)
}
return("bp_pr"=bp_pr,"bp_loc"=bp_loc,"pop_rates"=pop_rates,"pop_rates_lag"=pop_rates_lag)
}
pop_sim_plot(strain,strain_rates,gr,yl,iterations)
print(pickstrain)
print(mean(bp_pr))
devtools::document()
iterations=10
yl=10^22
gr=seq(0,0.5,0.005)
N=100
pop_sim_plot(strain,strain_rates,gr,yl,iterations)
library(detstocgrowth)
View(pop_sim_plot)
pop_sim_plot(strain,strain_rates,gr,yl,iterations)
setwd("~/discstoch/Analyses/PopulationData")
# This script is to analyze Population Level Simulations
# and produces all of the main Figures submitted in the Dissertation
library(data.table)
############################################## Data #################################################
dataset<-function(x){
if (x == "Lawless"){
# DataSet1: Lawless
area=fread("~/discstoch/Analyses/LineageData/Lawless_area_shortTC.txt",header=FALSE)
times=fread("~/discstoch/Analyses/LineageData/Lawless_time_shortTC.txt",header=FALSE)
data=fread("~/discstoch/Analyses/LineageData/Lawless_data_shortTC.txt",header=FALSE) #3rd column (Identifier) => strain_parentcolony
names(data)=c("genotype","clonalcolony","identifier","blobnumber")
return(list("area"=area,"data"=data,"times"=times))
}
else if (x == "Levy"){
# DataSet2: Levy
area=fread("Levy_area_NF.txt",header=TRUE)
times=fread("Levy_time_NF.txt",header=TRUE)
data=fread("Levy_data_NF.txt",header=TRUE) #3rd column (Identifier) => replicate
#info=read.table("Levy_GrowthRateInfo.txt",header=TRUE,row.names=1)
return(list("area"=area,"data"=data,"times"=times))
}
else if (x == "Ziv"){
# DataSet3: Ziv
area=fread("Ziv_area_filtered1.txt",header=FALSE)
times=fread("Ziv_times_filtered1.txt",header=FALSE)
data=fread("Ziv_data_filtered1.txt",header=TRUE) #3rd column (Identifier) => colony
info=read.table("Ziv_GrowthRateInfo.txt",header=TRUE,row.names=1)
return(list("area"=area,"data"=data,"times"=times,"info"=info))
}
else {print("Not a valid dataset")}
}
# Choosing a data set
datsetname="Lawless"
x=dataset(datsetname)
area=x$area
times=x$times
data=x$data
# Deterministic Bayesian Parameters (currently logistic -> change to exponential ones)
params=c("1:100","101:200","201:300","301:400","401:500","501:600","601:700","701:800","801:900",
"901:1000","1001:1100","1101:1200","1201:1300","1301:1400","1401:1500","1501:1600",
"1601:1700","1701:1800","1801:1900")
total_params=matrix(0,ncol=2,nrow=length(params)*100+46)
for (i in 1:length(params)){
total_params[(1:100)+(100*(i-1)),]=as.matrix(read.table(paste("~/discstoch/Analyses/LineageData/Lawless_Bayes_parameters_BayesDetExp_",params[i],".txt",sep=""),header=TRUE))
}
total_params[1901:1946,]=as.matrix(read.table("~/discstoch/Analyses/LineageData/Lawless_Bayes_parameters_BayesDetExp_1901:1946.txt",header=TRUE))
total_rates_bayes=total_params[,2]
rates=total_rates_bayes
strain_names=unique(data$genotype)
pickstrain="HIS3"
strain=detstocgrowth::subset_strain(data,area,times,pickstrain)
strain_rates[which(strain_rates<0)]=0
################################################ Colour Map ########################################################
# Producing a colour map according to which the rest of the simulation are going to be colour-coded
par(mfrow=c(1,1))
growthraterange=seq(0,0.5,0.001)
yellowredmap(growthraterange)
# This script is to analyze Population Level Simulations
# and produces all of the main Figures submitted in the Dissertation
library(data.table)
############################################## Data #################################################
dataset<-function(x){
if (x == "Lawless"){
# DataSet1: Lawless
area=fread("~/discstoch/Analyses/LineageData/Lawless_area_shortTC.txt",header=FALSE)
times=fread("~/discstoch/Analyses/LineageData/Lawless_time_shortTC.txt",header=FALSE)
data=fread("~/discstoch/Analyses/LineageData/Lawless_data_shortTC.txt",header=FALSE) #3rd column (Identifier) => strain_parentcolony
names(data)=c("genotype","clonalcolony","identifier","blobnumber")
return(list("area"=area,"data"=data,"times"=times))
}
else if (x == "Levy"){
# DataSet2: Levy
area=fread("Levy_area_NF.txt",header=TRUE)
times=fread("Levy_time_NF.txt",header=TRUE)
data=fread("Levy_data_NF.txt",header=TRUE) #3rd column (Identifier) => replicate
#info=read.table("Levy_GrowthRateInfo.txt",header=TRUE,row.names=1)
return(list("area"=area,"data"=data,"times"=times))
}
else if (x == "Ziv"){
# DataSet3: Ziv
area=fread("Ziv_area_filtered1.txt",header=FALSE)
times=fread("Ziv_times_filtered1.txt",header=FALSE)
data=fread("Ziv_data_filtered1.txt",header=TRUE) #3rd column (Identifier) => colony
info=read.table("Ziv_GrowthRateInfo.txt",header=TRUE,row.names=1)
return(list("area"=area,"data"=data,"times"=times,"info"=info))
}
else {print("Not a valid dataset")}
}
# Choosing a data set
datsetname="Lawless"
x=dataset(datsetname)
area=x$area
times=x$times
data=x$data
# Deterministic Bayesian Parameters (currently logistic -> change to exponential ones)
params=c("1:100","101:200","201:300","301:400","401:500","501:600","601:700","701:800","801:900",
"901:1000","1001:1100","1101:1200","1201:1300","1301:1400","1401:1500","1501:1600",
"1601:1700","1701:1800","1801:1900")
total_params=matrix(0,ncol=2,nrow=length(params)*100+46)
for (i in 1:length(params)){
total_params[(1:100)+(100*(i-1)),]=as.matrix(read.table(paste("~/discstoch/Analyses/LineageData/Lawless_Bayes_parameters_BayesDetExp_",params[i],".txt",sep=""),header=TRUE))
}
total_params[1901:1946,]=as.matrix(read.table("~/discstoch/Analyses/LineageData/Lawless_Bayes_parameters_BayesDetExp_1901:1946.txt",header=TRUE))
total_rates_bayes=total_params[,2]
rates=total_rates_bayes
strain_names=unique(data$genotype)
pickstrain="HIS3"
strain=detstocgrowth::subset_strain(data,area,times,pickstrain)
strain_rates=rates[which(data$genotype==pickstrain)]
iterations=10
yl=10^22
gr=seq(0,0.5,0.005)
N=100
pop_sim_plot(strain,strain_rates,gr,yl,iterations)
pop_sim_plot
plot(1,type='n', xlim=range(time), ylim=c(100,yl),xlab="Time (h)",ylab="No. of Cells",log='y',cex.lab=1.4)
colours<-colorRampPalette(c("lightyellow","yellow","orange","red"))(n = length(gr))
gr_range=gr
bp_pr=c()
bp_loc=c()
pop_rates=c()
pop_rates_lag=c()
for (i in 1:it){
popsim=pop_sim_dat(strain=0,strain_rates,N,time,1)
popdata=popsim$PopData
poprate=popsim$SimRates
id=which(abs(gr_range-max(poprate))==min(abs(gr_range-max(poprate))))
lines(time,popdata,col=colours[id],lwd=2)
op_bcp=bcp::bcp(as.numeric(log(popdata)),time)
max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)
breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]
bp_pr=c(bp_pr,max_prob)
bp_loc=c(bp_loc,breakpoint_location)
if (max_prob==1){
area=as.numeric(log(popdata))
t=time
linmod=lm(area~t)
segmod=try(segmented::segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)
if (typeof(segmod)[1]=="list"){
k=segmented::slope(segmod)$t[,1][2]
klag=segmented::slope(segmod)$t[,1][1]
abline(v=segmod$psi[2],col=adjustcolor("black",0.2),lty=1)
}
else{
k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate
klag=NA
}
}else{
k=detstocgrowth::LM_growthrate(as.numeric(popdata),time)$rate
klag=NA
}
pop_rates=c(pop_rates,k)
pop_rates_lag=c(pop_rates_lag,klag)
}
plot(1,type='n', xlim=range(time), ylim=c(100,yl),xlab="Time (h)",ylab="No. of Cells",log='y',cex.lab=1.4)
devtools::document()
setwd("~/detstocgrowth/R")
devtools::document()
t=seq(1,48)
pop_sim_plot(strain,strain_rates,gr,yl,iterations,t)
simpopdat=pop_sim_plot(strain,strain_rates,gr,yl,iterations,t)
print(pickstrain)
print(mean(simpopdat$bp_pr))
print(min(bp_pr))
print(time[mean(simpopdat$bp_loc)])
print(mean(simpopdat$pop_rates))
print(mean(simpopdat$pop_rates[-which(is.na(simpopdat$pop_rates_lag))]))
print(mean(simppdat$pop_rates_lag,na.rm=TRUE))
tt=t.test(simpopdat$pop_rates,simpopdat$pop_rates_lag,conf.level=0.99,paired=TRUE)
print(tt$p.value)
print(pickstrain)
print(mean(simpopdat$bp_pr))
print(min(bp_pr))
print(time[mean(simpopdat$bp_loc)])
print(mean(simpopdat$pop_rates))
print(mean(simpopdat$pop_rates[-which(is.na(simpopdat$pop_rates_lag))]))
print(mean(simpopdat$pop_rates_lag,na.rm=TRUE))
tt=t.test(simpopdat$pop_rates,simpopdat$pop_rates_lag,conf.level=0.99,paired=TRUE)
print(tt$p.value)
iterations=100
yl=10^22
gr=seq(0,0.5,0.005)
N=1000
t=seq(1,48)
simpopdat=pop_sim_plot(strain,strain_rates,gr,yl,iterations,t)
print(pickstrain)
print(mean(simpopdat$bp_pr))
print(min(bp_pr))
print(time[mean(simpopdat$bp_loc)])
print(mean(simpopdat$pop_rates))
print(mean(simpopdat$pop_rates[-which(is.na(simpopdat$pop_rates_lag))]))
print(mean(simpopdat$pop_rates_lag,na.rm=TRUE))
tt=t.test(simpopdat$pop_rates,simpopdat$pop_rates_lag,conf.level=0.99,paired=TRUE)
print(tt$p.value)
bp_pr
print(min(simpopdat$bp_pr))
h=hist(strain_rates,breaks=gr,plot=FALSE)
hcol=colours[sapply(h$mids, function(x) which(abs(gr_range-x)==min(abs(gr_range-x)))[1])]
plot(h,col=hcol,cex.lab=1.4)
abline(v=mean(strain_rates),col="red",lwd=3)
abline(v=mean(strain_rates),col="black",lwd=3)
h=hist(strain_rates,breaks=gr,plot=FALSE)
hcol=colours[sapply(h$mids, function(x) which(abs(gr_range-x)==min(abs(gr_range-x)))[1])]
plot(h,col=hcol,cex.lab=1.4)
abline(v=mean(strain_rates),col="red",lwd=3)
abline(v=mean(simpopdat$pop_rates),col="black",lwd=3)
devtools::document()
N=100
iterations=10
t=seq(0,48,1)
sizerates=meanvar(strain,strain_rates,N,iterations,t)
sizerates=meanvarsim(strain,strain_rates,N,iterations,t)
init_pop=seq(1,N,1)
all_simpoprate=list()
all_simpopratelag=list()
for (i in 1:length(init_pop)){
init_simpoprate=c()
init_simpopratelag=c()
for (j in 1:iterations){
total_popsim=detstocgrowth::pop_sim_dat(strain=0,strain_rates,i,t,1)
simdata=total_popsim$PopData
simitdata=simdata
op_bcp=bcp::bcp(as.numeric(log(simitdata)),t)
max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)
breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]
if (max_prob>0.5){
area=as.numeric(log(simitdata))
t=t
linmod=lm(area~t)
segmod=try(segmented::segmented(linmod,seg.Z =~t,psi=breakpoint_location),silent=TRUE)
if (typeof(segmod)[1]=="list"){
k=segmented::slope(segmod)$t[,1][2]
klag=segmented::slope(segmod)$t[,1][1]
}
else{
k=detstocgrowth::LM_growthrate(as.numeric(simitdata),t)$rate
klag=NA
}
}else{
k=detstocgrowth::LM_growthrate(as.numeric(simitdata),time)$rate
klag=NA
}
init_simpoprate=c(init_simpoprate,k)
init_simpopratelag=c(init_simpopratelag,klag)
}
all_simpoprate[[i]]=as.numeric(init_simpoprate)
all_simpopratelag[[i]]=as.numeric(init_simpopratelag)
}
i
j
total_popsim=detstocgrowth::pop_sim_dat(strain=0,strain_rates,i,t,1)
simdata=total_popsim$PopData
simitdata=simdata
op_bcp=bcp::bcp(as.numeric(log(simitdata)),t)
max_prob=max(op_bcp[8]$posterior.prob,na.rm=TRUE)
breakpoint_location=which(op_bcp[8]$posterior.prob==max_prob)[1]
max_prob>0.5
devtools::document()
N=100
iterations=10
t=seq(0,48,1)
init_pop=seq(1,N,1)
sizerates=meanvarsim(strain,strain_rates,N,iterations,t)
N=10
iterations=1
sizerates=meanvarsim(strain,strain_rates,N,iterations,t)
library(detstocgrowth)
